package csi.android.ecops.view;

import android.Manifest;
import android.app.Activity;
import android.app.Dialog;
import android.content.ActivityNotFoundException;
import android.content.BroadcastReceiver;
import android.content.ContentUris;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.pm.PackageManager;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.databinding.Bindable;
import android.databinding.DataBindingUtil;
import android.databinding.Observable;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.media.MediaRecorder;
import android.media.ThumbnailUtils;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.net.wifi.WifiManager;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.Environment;
import android.os.Handler;
import android.os.Message;
import android.os.ParcelFileDescriptor;
import android.provider.DocumentsContract;
import android.provider.MediaStore;
import android.provider.OpenableColumns;
import android.support.annotation.NonNull;
import android.support.v4.app.ActivityCompat;
import android.support.v4.content.ContextCompat;
import android.support.v4.content.FileProvider;
import android.support.v4.content.LocalBroadcastManager;
import android.support.v7.app.AlertDialog;
import android.support.v7.internal.view.ContextThemeWrapper;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.WindowInsets;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ArrayAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.GridView;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.RadioButton;
import android.widget.TextView;
import android.widget.Toast;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.security.Permissions;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import csi.android.ecops.BuildConfig;
import csi.android.ecops.Config;
import csi.android.ecops.LogEcops;
import csi.android.ecops.R;
import csi.android.ecops.Tools;
import csi.android.ecops.TrabalhoRecurso;
import csi.android.ecops.Workflow;
import csi.android.ecops.componente.ListaFormularios;
import csi.android.ecops.componente.Tela;
import csi.android.ecops.componente.TelaCompact;
import csi.android.ecops.dao.AtendimentoFaseEmpenhoDAO;
import csi.android.ecops.databinding.TelaAtendimentoEnvolvidoBinding;
import csi.android.ecops.dominio.AtendimentoFaseEmpenho;
import csi.android.ecops.dominio.ConfigPrinter;
import csi.android.ecops.dominio.DocumentoDespacho;
import csi.android.ecops.dominio.EnvolvidoDocumento;
import csi.android.ecops.dominio.EnvolvidoSamu;
import csi.android.ecops.dominio.EnvolvidoTipoDocumento;
import csi.android.ecops.dominio.EnvolvidoTipoTermoFm;
import csi.android.ecops.dominio.EnvolvidoTransferencia;
import csi.android.ecops.dominio.FaseEmpenho;
import csi.android.ecops.dominio.LoginViatura;
import csi.android.ecops.dominio.Ocorrencia;
import csi.android.ecops.dominio.OcorrenciaAtendimento;
import csi.android.ecops.dominio.OcorrenciaObservacao;
import csi.android.ecops.dominio.RastreadorBrasilTrack;
import csi.android.ecops.dominio.TipoAtendimento;
import csi.android.ecops.dominio.TipoFaseEmpenho;
import csi.android.ecops.dominio.Usuario;
import csi.android.ecops.dominio.Viatura;
import csi.android.ecops.service.EcopsService;
import csi.android.ecops.service.LoginRequestService;
import csi.android.ecops.service.Persistencia;
import csi.android.ecops.service.SomRecursoEmAndamento;
import csi.android.ecops.taks.ROTINA_BOLETIM;
import csi.android.ecops.taks.ROTINA_IMPRESSAO;
import csi.android.ecops.tools.ConnectPrinter;
import csi.android.ecops.tools.Connectivity;
import csi.android.ecops.tools.Constants;
import csi.android.ecops.tools.ConvertJsonForObject;
import csi.android.ecops.tools.ImageListAdapter;
import csi.android.ecops.tools.Parametros;
import csi.android.ecops.tools.Resposta;
import csi.android.ecops.view.audio.AudioDialog;
import csi.android.ecops.view.documentos.PainelDocumento;
import csi.android.ecops.view.encaminhamento.Encaminhamento;
import csi.android.ecops.view.envolvido.EnvolvidoDadosGerais;
import csi.android.ecops.view.envolvido.EnvolvidoEvolucaoEnfermagem;
import csi.android.ecops.view.envolvido.EnvolvidoEvolucaoMedica;
import csi.android.ecops.view.envolvido.EnvolvidoObservacoes;
import csi.android.ecops.view.envolvido.EnvolvidoSinaisVitais;
import csi.android.ecops.view.envolvido.TelaSinaisVitais;
import csi.android.ecops.view.hipoteseDiagnostica.HipoteseDiagnosticaActivity;
import csi.android.ecops.view.mapa.EnvolvidoMapaRota;

public class AtendimentoEnvolvido extends Tela implements Observable,
        ActivityCompat.OnRequestPermissionsResultCallback {
    Handler handler = new Handler() {

        @Override
        public void handleMessage(Message msg) {
            updateEventUi(msg);
        }
    };
    private static AtendimentoEnvolvido instance;
    // Request code for creating a PDF document.
    private static final int CREATE_FILE = 101;
    private static final int REQUEST_VIDEO_CAPTURE = 102;

    private static final int MICROPHONE_PERMISSION_CODE = 103;


    private TelaAtendimentoEnvolvidoBinding binding;
    private boolean flagExibeBotaoLiberar = false;
    private String parametroMedico;
    private String parametroEnfermeiro;
    private String parametroTecEnfermagem;

    private byte[] fileToSaveResult;

    // View lookup cache
    private static class ViewHolder {
        TextView name;
    }


    public static AtendimentoEnvolvido getInstance() {
        return instance;
    }


    @Bindable
    public Integer getCanLiberar() {
        return canLiberar;
    }

    public void setCanLiberar(Integer canLiberar) {
        this.canLiberar = canLiberar;
    }

    private TrabalhoRecurso iTrabalho = TrabalhoRecurso.getInstance();

    public class UsuarioEnvolvidoWap {
        public OcorrenciaAtendimento oa;
        public EnvolvidoTransferencia e;
        public EnvolvidoSamu es;
        public long idTipoTermoFm;
        public long idTipoDocumento;
        public List<EnvolvidoTipoDocumento> etd;

        public UsuarioEnvolvidoWap(OcorrenciaAtendimento oa, EnvolvidoTransferencia e, EnvolvidoSamu es) {
            super();
            this.oa = oa;
            this.e = e;
            this.es = es;
        }

    }


    String namePhotoDocuments;
    public UsuarioEnvolvidoWap uew = null;


    protected void updateEventUi(Message msg) {
        switch (msg.what) {
            case 0:
                break;
            case 1:
                break;
            case 2:
                break;
            case 3:
                break;
            case 4:
                break;

        }
    }

    public void addOnPropertyChangedCallback(Observable.OnPropertyChangedCallback var1) {

    }

    public void removeOnPropertyChangedCallback(Observable.OnPropertyChangedCallback var1) {

    }

    public void alterarBotaoLiberar(boolean liberar) {

        if ("arcelor".equals(BuildConfig.FLAVOR)
                || "sespdemo".equals(BuildConfig.FLAVOR)) {
            liberar = false;
        }

        if (binding != null) {
            if (!flagExibeBotaoLiberar) {
                binding.setCanLiberar(View.GONE);
                return;
            }
            binding.setCanLiberar(liberar ? View.VISIBLE : View.GONE);

        }

    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);
        instance = this;
        setContentView(R.layout.tela_atendimento_envolvido);
        TelaAtendimentoEnvolvidoBinding tela = DataBindingUtil.setContentView(this, R.layout.tela_atendimento_envolvido);
        binding = tela;

        alterarBotaoLiberar(false);
        _consultaParametrosCargos();
        OcorrenciaAtendimento oa = (OcorrenciaAtendimento) getObjetoTela("ocorrenciaAtendimento");
        EnvolvidoTransferencia e = (EnvolvidoTransferencia) getObjetoTela("envolvido");
        _configurarButtonCameraTela();
        EnvolvidoTransferencia eAtual = TrabalhoRecurso.getInstance().buscarEnvolvido(context, e, oa);

        if (eAtual != null) {
            _painelEnvolvido(oa.ocorrencia, eAtual, oa.u);
        } else {
            _painelEnvolvido(oa.ocorrencia, e, oa.u);
        }

        uew = new UsuarioEnvolvidoWap(oa, e, null);
        _configGridViewDocumentosLocal(uew.e);
        String nome = oa.u.getNmAbrevUsuario();
        String nome2 = oa.u.getCdUsuario();
        String nome3 = oa.u.getCdTipoUsuario();

        LogEcops.debug("testeuser" + nome + nome2 + nome3);

        try {
            int idFase = (oa.ocorrencia.getIdFasesEmpenhos() != null) ? oa.ocorrencia.getIdFasesEmpenhos() : 0;
            alterarBotaoLiberar((idFase > 0
                    && FaseEmpenho.getProximo(idFase).getTipoFaseEmpenho() == TipoFaseEmpenho.LIBERACAO && FaseEmpenho.getProximo(idFase).getCodigo() != null)
                    || FaseEmpenho.getProximo(idFase) == FaseEmpenho.IH_SAIDA_HOSPITAL_ORIGEM || FaseEmpenho.getProximo(idFase) == FaseEmpenho.BR_SAIDA_HOSPITAL_ORIGEM
                    || FaseEmpenho.getProximo(idFase) == FaseEmpenho.IH_CHEGADA_HOSPITAL_DESTINO || FaseEmpenho.getProximo(idFase) == FaseEmpenho.BR_CHEGADA_HOSPITAL_DESTINO
                    || (idFase == FaseEmpenho.PH_SAIDA_LOCAL.getCodigo() && uew.e.getCdDestino() == 0)
                    || (idFase == FaseEmpenho.PH_ATENDIMENTO_ANDAMENTO.getCodigo() && !"zelo".equals(BuildConfig.FLAVOR)));

        } catch (NullPointerException ex) {
            ex.printStackTrace();
        }


        new ROTINA_CONSULTAR(this).execute(uew);
        if (Tools.getStringResourceValidation(getString(R.string.FEATURES_ATENDIMENTO_DOCUMENTOS))) {
            LogEcops.debug("FEATURES_ATENDIMENTO_DOCUMENTOS");
            new ROTINA_CONSULTAR_DOCUMENTO_TIPO(this).execute(uew);
        }

        try {
            int idFase = (oa.ocorrencia.getIdFasesEmpenhos() != null) ? oa.ocorrencia.getIdFasesEmpenhos() : 0;
            alterarBotaoLiberar((idFase > 0
                    && FaseEmpenho.getProximo(idFase).getTipoFaseEmpenho() == TipoFaseEmpenho.LIBERACAO)
                    || FaseEmpenho.getProximo(idFase) == FaseEmpenho.IH_SAIDA_HOSPITAL_ORIGEM || FaseEmpenho.getProximo(idFase) == FaseEmpenho.BR_SAIDA_HOSPITAL_ORIGEM
                    || FaseEmpenho.getProximo(idFase) == FaseEmpenho.IH_CHEGADA_HOSPITAL_DESTINO || FaseEmpenho.getProximo(idFase) == FaseEmpenho.BR_CHEGADA_HOSPITAL_DESTINO
                    || (idFase == FaseEmpenho.PH_SAIDA_LOCAL.getCodigo() && uew.e.getCdDestino() == 0)
                    || (idFase == FaseEmpenho.PH_ATENDIMENTO_ANDAMENTO.getCodigo() && !"zelo".equals(BuildConfig.FLAVOR)));

        } catch (NullPointerException ex) {
            ex.printStackTrace();
        }


        mLocalBroadcastManager = LocalBroadcastManager.getInstance(this);
        IntentFilter mIntentFilter = new IntentFilter();
        mIntentFilter.addAction("BROADCAST_ENVOLVIDO");
        mLocalBroadcastManager.registerReceiver(mBroadcastReceiver, mIntentFilter);
        _configBotaoImpressao();
        _configuracaoButtonsStateOcorrencia(oa);
        _gridViewResumeStatus(uew.e);
        _configuracaoMicrofoneBtn();
        _configuracaoVideoBtn();
        _configuracaoHipoteseDiagnostica();
    }

    private void _configuracaoHipoteseDiagnostica() {
        ImageButton hipotesesBtn = (ImageButton) findViewById(R.id.btn_hipotese_diagnostica);

        if(Parametros.getInstance(context).isFL_EXIBE_HIPOTESE_MOBILE()) {
            hipotesesBtn.setVisibility(View.VISIBLE);
            hipotesesBtn.setOnClickListener(new OnClickListener() {
                @Override
                public void onClick(View view) {
                    Intent it = new Intent(AtendimentoEnvolvido.this, HipoteseDiagnosticaActivity.class);
                    it.addFlags(Intent.FLAG_ACTIVITY_NO_USER_ACTION);
                    it.putExtra("usuario", uew.oa.u);
                    it.putExtra("envolvido", uew.e);
                    putObjetoTela(it);
                }
            });
        }

    }

    /*@Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        if (requestCode == MICROPHONE_PERMISSION_CODE)  {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                Tools.popMenssage(this, "PERMISSÃO CONCEDIDA");
                creatAudioDialog();
            } else {
                Tools.popMenssage(this, "PERMISSÃO NEGADA");
            }
        }
    }*/


    private boolean isMicrofonePresente() {
        if(this.getPackageManager().hasSystemFeature(PackageManager.FEATURE_MICROPHONE)){
            return true;
        }
        return false;
    }

    private boolean getMicrofonePermissao() {
        if(ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO)
                != PackageManager.PERMISSION_GRANTED){
            ActivityCompat.requestPermissions(this, new String[] {
                    Manifest.permission.RECORD_AUDIO}, MICROPHONE_PERMISSION_CODE);

            return false;
        }
        return true;
    }

    void creatAudioDialog() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.RECORD_AUDIO) != PackageManager.PERMISSION_GRANTED)
        {
            ActivityCompat.requestPermissions(this, new String[] { Manifest.permission.RECORD_AUDIO }, 0);
            return;
        }
        AudioDialog audioDialog = new AudioDialog(
                this,
                new AudioDialog.OnRecordDone() {
                    @Override
                    public void done(String filepath) {
                        _formularioDescricaoDocumento(Uri.parse(filepath), Constants.Media.AUDIO);
                    }
                },
                generateFileName(Constants.Media.AUDIO)
        );

        audioDialog.createAudioRecorder(getLayoutInflater(), this);

        audioDialog = null;
    }


    private void _configuracaoVideoBtn() {

        ImageButton videoBtn = (ImageButton) findViewById(R.id.videoBtn);
        if(Parametros.getInstance(context).isFL_EXIBE_VIDEO_MOBILE()) {
            videoBtn.setVisibility(View.VISIBLE);
            videoBtn.setOnClickListener(new OnClickListener() {
                @Override
                public void onClick(View view) {
                    dispatchTakeVideoIntent();
                }
            });
        } else {
            videoBtn.setVisibility(View.GONE);
        }

    }
    private void _configuracaoMicrofoneBtn() {
             ImageButton microfoneBtn = (ImageButton) findViewById(R.id.microfoneBtn);
        if(Parametros.getInstance(context).isFL_EXIBE_VIDEO_MOBILE()) {
            microfoneBtn.setVisibility(View.VISIBLE);
            microfoneBtn.setOnClickListener(new OnClickListener() {
                @Override
                public void onClick(View view) {

                    creatAudioDialog();
                }
            });
        } else {
            microfoneBtn.setVisibility(View.GONE);
        }

    }



    public void dialogGravaoAudio(){

    }

    LocalBroadcastManager mLocalBroadcastManager;
    BroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {

        @Override
        public void onReceive(Context context, Intent intent) {
            if (intent.getAction().equals("BROADCAST_ENVOLVIDO")) {
                AtendimentoEnvolvido.this.finish();
            }
        }
    };

    protected void onDestroy() {
        super.onDestroy();
        mLocalBroadcastManager.unregisterReceiver(mBroadcastReceiver);
    }

    @Override
    protected void onStart() {
        LogEcops.debug("AtendimentoEnvolvido: onResume");
        super.onStart();
    }

    @Override
    protected void onResume() {
        LogEcops.debug("AtendimentoEnvolvido: onResume");
        Tools.finalizarSom();
        if (uew != null && uew.e != null) {
            _gridViewResumeStatus(uew.e);
            //recarregar dados envolvido
            EnvolvidoTransferencia eAtual = TrabalhoRecurso.getInstance().buscarEnvolvido(context, uew.e);
            if (eAtual != null) _painelEnvolvido(uew.oa.ocorrencia, eAtual, uew.oa.u);
            else _painelEnvolvido(uew.oa.ocorrencia, uew.e, uew.oa.u);

            try {
                int idFase = (uew.oa.ocorrencia.getIdFasesEmpenhos() != null) ? uew.oa.ocorrencia.getIdFasesEmpenhos() : 0;
                alterarBotaoLiberar((idFase > 0
                        && FaseEmpenho.getProximo(idFase).getTipoFaseEmpenho() == TipoFaseEmpenho.LIBERACAO && FaseEmpenho.getProximo(idFase).getCodigo() != null)
                        || FaseEmpenho.getProximo(idFase) == FaseEmpenho.IH_SAIDA_HOSPITAL_ORIGEM || FaseEmpenho.getProximo(idFase) == FaseEmpenho.BR_SAIDA_HOSPITAL_ORIGEM
                        || FaseEmpenho.getProximo(idFase) == FaseEmpenho.IH_CHEGADA_HOSPITAL_DESTINO || FaseEmpenho.getProximo(idFase) == FaseEmpenho.BR_CHEGADA_HOSPITAL_DESTINO
                        || (idFase == FaseEmpenho.PH_SAIDA_LOCAL.getCodigo() && uew.e.getCdDestino() == 0)
                        || (idFase == FaseEmpenho.PH_ATENDIMENTO_ANDAMENTO.getCodigo() && !"zelo".equals(BuildConfig.FLAVOR)));

            } catch (NullPointerException ex) {
                ex.printStackTrace();
            }
        }
        super.onResume();
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        if (Tools.getStringResourceValidation(getString(R.string.FEATURES_ATENDIMENTO_DOCUMENTOS))) {
            if (requestCode == 400) {
                LogEcops.debug("onActivityResult 400");


                if (isStoragePermissionGranted()) {
                    _formularioDescricaoDocumento(Uri.parse(namePhotoDocuments), Constants.Media.IMAGE);
                }

            } else if (requestCode == CREATE_FILE && resultCode == Activity.RESULT_OK) {
                // The result data contains a URI for the document or directory that
                // the user selected.
                Uri uri = null;
                if (data != null && this.fileToSaveResult != null) {
                    uri = data.getData();

                    new ROTINA_SALVAR_PDF(this, this.fileToSaveResult, uri).execute();

                }


            } else if (requestCode == REQUEST_VIDEO_CAPTURE && resultCode == RESULT_OK) {
                Uri videoUri = data.getData();
                _formularioDescricaoDocumento(videoUri, Constants.Media.VIDEO);
            }


        }
    }

    private class ROTINA_SALVAR_PDF extends Workflow<Void, String, Uri> {

        private final byte[] fileToSaveResult;
        private final Uri uri;


        public ROTINA_SALVAR_PDF(Activity ctx, byte[] fileToSaveResult, Uri uri) {
            super(ctx);
            this.uri = uri;
            this.fileToSaveResult = fileToSaveResult;
        }

        @Override
        protected Uri doInBackground(Void... voids) {
            Tools.documentoSalvarLocal(fileToSaveResult, uri, (Activity) ctx);
            return uri;
        }

        @Override
        protected void onPostExecute(Uri file) {
            abrirPDF(file);
        }
    }


    private void abrirPDF(Uri file) {

        Intent i = new Intent(Intent.ACTION_VIEW);
        i.setDataAndType(file, "application/pdf");
        i.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_GRANT_READ_URI_PERMISSION);
        startActivity(i);
    }

    void _configBotaoImpressao() {

        ((ImageButton) findViewById(R.id.atendimentoDataPrinter)).setVisibility(ImageButton.GONE);


        if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT
                && (BuildConfig.FLAVOR == "unimedBH" || Parametros.getInstance(context).isFL_EXIBE_FM_MOBILE())) { // verificação
            ((ImageButton) findViewById(R.id.atendimentoDataPrinter)).setVisibility(ImageButton.VISIBLE);
            ImageButton button = (ImageButton) findViewById(R.id.atendimentoDataPrinter);
            button.setOnClickListener(new OnClickListener() {
                @Override
                public void onClick(View v) {
                    new ROTINA_CONSULTAR_TERMOFM(AtendimentoEnvolvido.this).execute(uew);
                }
            });
        }


    }

    void _configBotaoEditEncaminhamento(final UsuarioEnvolvidoWap result) {
        Button btnEncaminhamento = (Button) findViewById(R.id.editEstabelecimentoDestino);

        btnEncaminhamento.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View view) {
                Intent it = new Intent(AtendimentoEnvolvido.this, Encaminhamento.class);
                it.addFlags(Intent.FLAG_ACTIVITY_NO_USER_ACTION);
                it.putExtra("usuario", uew.oa.u);
                it.putExtra("envolvido", uew.e);
                it.putExtra("cdTipoDestinoEnvolvido", result.es.getCdTipoDestinoEnvolvido());
                it.putExtra("cdHospital", result.es.getIdHospitalDestino());

                startActivity(it);
            }
        });

        new ROTINA_PARAMETRO_ENCAMINHAMENTO(AtendimentoEnvolvido.this, btnEncaminhamento).execute();

    }

    void _configBotaoMapaRotas(final UsuarioEnvolvidoWap uew) {

        ImageButton imagebutton = (ImageButton) findViewById(R.id.imagemButtonAtendimentoEnvolvidoMapaRota);

        if (Tools.getStringResourceValidation(getString(R.string.BOTAO_ROTA_ENVOLVIDO_PERSISTENTE))) {
            imagebutton.setVisibility(View.VISIBLE);
        } else {
            imagebutton.setVisibility((uew.e != null && uew.e.getDsEnderecoDestino() != null && uew.e.getDsEnderecoDestino() != null) ? View.VISIBLE : View.GONE);
        }
        imagebutton.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View arg0) {
                new ROTINA_WIFI(AtendimentoEnvolvido.this).execute(uew);
            }
        });

    }

    private void dispatchTakeVideoIntent() {
        if (ContextCompat.checkSelfPermission(this, Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED)
        {
            ActivityCompat.requestPermissions(this, new String[] { Manifest.permission.CAMERA }, 0);
            return;
        }
        Intent takeVideoIntent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);
        if (takeVideoIntent.resolveActivity(getPackageManager()) != null) {
            startActivityForResult(takeVideoIntent, REQUEST_VIDEO_CAPTURE);
        }
    }

    String generateFileName(Constants.Media media) {
        String filename = "";
        String idFile = uew.oa.ocorrencia.getDespachoAndamentoPK().getNrChamado().toString() + "-" + uew.e.getIdEnvolvidoDesp().toString() + "-";

        switch (media) {
            case AUDIO:
                filename = Tools.audioSalvarLocal(idFile);
                break;
            case IMAGE:
                File file = null;
                try {
                    file = Tools.imagemSalverLocal(idFile, getExternalFilesDir(Environment.DIRECTORY_PICTURES));
                } catch (IOException e) {
                    e.printStackTrace();
                }
                filename = file.getAbsolutePath();
                break;
            case VIDEO:
                filename = Tools.videoSalvarLocal(idFile);
                break;
        }
        return filename;
    }

    void _configurarButtonCameraTela() {

        ((ImageButton) findViewById(R.id.atendimentoDadosCameraIntentImageButton)).setVisibility(ImageButton.GONE);
        ((ImageButton) findViewById(R.id.atendimentoDadosGalleryMediaImageButton)).setVisibility(ImageButton.GONE);

        if (Tools.getStringResourceValidation(getString(R.string.FEATURES_ATENDIMENTO_DOCUMENTOS))) { // verificação
            ((ImageButton) findViewById(R.id.atendimentoDadosCameraIntentImageButton)).setVisibility(ImageButton.VISIBLE);

            if (Tools.getStringResourceValidation(getString(R.string.FEATURES_ATENDIMENTO_GALERIA_DOCUMENTOS))) {
                ((ImageButton) findViewById(R.id.atendimentoDadosGalleryMediaImageButton)).setVisibility(ImageButton.VISIBLE);
            }
            final ImageButton buttonCamera = (ImageButton) findViewById(R.id.atendimentoDadosCameraIntentImageButton);
            buttonCamera.setOnClickListener(new OnClickListener() {
                @Override
                public void onClick(View v) {

                    if(Tools.makeRequestPermission(AtendimentoEnvolvido.this, CAMERA_PERMS, CAMERA_REQUEST )) {
                        callCameraGaleria();
                    }
                }
            });
        }

        if (Tools.getStringResourceValidation(getString(R.string.FEATURES_ATENDIMENTO_GALERIA_DOCUMENTOS))) {
            ImageButton buttonGallery = (ImageButton) findViewById(R.id.atendimentoDadosGalleryMediaImageButton);
            buttonGallery.setOnClickListener(new OnClickListener() {
                @Override
                public void onClick(View v) {

                    Intent intent = new Intent();
                    intent.setType("image/*");
                    intent.setAction(Intent.ACTION_GET_CONTENT);

                    startActivityForResult(Intent.createChooser(intent, "Selecione uma Galeria"), 300);
                }
            });
        }
    }

    private static final String[] CAMERA_PERMS={
            Manifest.permission.CAMERA
    };
    private static final int INITIAL_REQUEST=1337;
    private static final int CAMERA_REQUEST=INITIAL_REQUEST+1;

    @Override
    public void onRequestPermissionsResult(int requestCode, String[] permissions, int[] grantResults) {

        switch(requestCode) {
            case CAMERA_REQUEST:
                if (Tools.hasPermission(this, Manifest.permission.CAMERA)) {
                    callCameraGaleria();
                }
                else {
                    Tools.popUp(this,"Necessário permissão para exibir a galeria");
                }
                break;
        }
    }

    void callCameraGaleria() {
        //if (buttonCamera.isLongClickable()) {
        String idFile = uew.oa.ocorrencia.getDespachoAndamentoPK().getNrChamado().toString() + "-" + uew.e.getIdEnvolvidoDesp().toString() + "-";
        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        File file = null;
        try {
            //file = Tools.imagemSalverLocal(idFile);
            file = Tools.imagemSalverLocal(idFile, getExternalFilesDir(Environment.DIRECTORY_PICTURES));
        } catch (IOException e) {
            e.printStackTrace();
        }
        //namePhotoDocuments = file.getName();
        namePhotoDocuments = file.getAbsolutePath();

        Uri photoURI = FileProvider.getUriForFile(AtendimentoEnvolvido.this,
                "com.example.android.fileprovider",
                file);
        intent.putExtra(MediaStore.EXTRA_OUTPUT, photoURI);

        startActivityForResult(intent, 400);

        //} else {
        //    Tools.popUp(AtendimentoEnvolvido.this, "Aviso !", getString(R.string.FORMULARIO_SEM_INFORMCAO_TIPO_DOCUMENTO));
        //}
    }

    void _gridViewResumeStatus(EnvolvidoTransferencia e) {
        if (Tools.getStringResourceValidation(getString(R.string.FEATURES_ATENDIMENTO_DOCUMENTOS))) {
            ((LinearLayout) findViewById(R.id.atendimentoDAdosPainelImagens)).setVisibility(LinearLayout.VISIBLE);
            GridView gridview = (GridView) findViewById(R.id.atendimentoDadosGridViewImagens);
            int sizeDocuments = Tools.imagemAddGridView(this, gridview, e.getIdEnvolvidoDesp().toString());
            if (sizeDocuments > 0) {
                gridview.setOnItemClickListener(new OnItemClickListener() {
                    public void onItemClick(AdapterView<?> parent, View v, int position, long id) {
                        GridView gridview = (GridView) findViewById(R.id.atendimentoDadosGridViewImagens);
                        ImageListAdapter adapter = (ImageListAdapter) gridview.getAdapter();
                        DocumentoDespacho documentoDespacho = adapter.imgPic.get(position);
                        if(Constants.Media.valueOf(documentoDespacho.getMedia()) == Constants.Media.IMAGE) {
                            if (Tools.isDocumentoUrlFileLocal(documentoDespacho.getPathFile())) {
                                Tools.popUpImagem(AtendimentoEnvolvido.this, documentoDespacho.getPathFile());
                            } else {
                                Tools.popMenssage(AtendimentoEnvolvido.this, getString(R.string.ERRO_FILE_END));
                            }
                        }
                    }
                });
            } else {
                ((LinearLayout) findViewById(R.id.atendimentoDAdosPainelImagens)).setVisibility(LinearLayout.GONE);
            }
        }
    }

    void _configGridViewDocumentosLocal(EnvolvidoTransferencia e) {
        if (Tools.getStringResourceValidation(getString(R.string.FEATURES_ATENDIMENTO_DOCUMENTOS))) {
            ((LinearLayout) findViewById(R.id.atendimentoDAdosPainelImagens)).setVisibility(LinearLayout.VISIBLE);
            GridView gridview = (GridView) findViewById(R.id.atendimentoDadosGridViewImagens);
            int sizeDocuments = Tools.imagemAddGridView(this, gridview, e.getIdEnvolvidoDesp().toString());
            if (sizeDocuments > 0) {
                gridview.setOnItemClickListener(new OnItemClickListener() {
                    public void onItemClick(AdapterView<?> parent, View v, int position, long id) {
                        GridView gridview = (GridView) findViewById(R.id.atendimentoDadosGridViewImagens);
                        ImageListAdapter adapter = (ImageListAdapter) gridview.getAdapter();
                        DocumentoDespacho documentoDespacho = adapter.imgPic.get(position);
                        if(Constants.Media.valueOf(documentoDespacho.getMedia()) == Constants.Media.IMAGE) {
                            if (Tools.isDocumentoUrlFileLocal(documentoDespacho.getPathFile())) {
                                Tools.popUpImagem(AtendimentoEnvolvido.this, documentoDespacho.getPathFile());
                            } else {
                                Tools.popMenssage(AtendimentoEnvolvido.this, getString(R.string.ERRO_FILE_END));
                            }
                        }
                    }
                });
            } else {
                ((LinearLayout) findViewById(R.id.atendimentoDAdosPainelImagens)).setVisibility(LinearLayout.GONE);

            }
            new ROTINA_ATENDIMENTO_DOCUMENTOS(this).execute(uew);

        } else {
            ((LinearLayout) findViewById(R.id.atendimentoDAdosPainelImagens)).setVisibility(LinearLayout.GONE);
        }
    }

    public static int getId(String resourceName, Class<?> c) {
        try {
            Field idField = c.getDeclaredField(resourceName);
            return idField.getInt(idField);
        } catch (Exception e) {
            throw new RuntimeException("No resource ID found for: "
                    + resourceName + " / " + c, e);
        }
    }

    void _painelEnvolvido(Ocorrencia o, EnvolvidoTransferencia e, Usuario u) {

        try {
            TextView textViewNome = (TextView) findViewById(R.id.envovidoFormDadosGeraisNomePessoa);
            TextView textViewSexo = (TextView) findViewById(R.id.atendimentoEnvolvidoTextSexo);

            TextView textViewHospitalOrigem = (TextView) findViewById(R.id.atendimentoEnvolvidoTextEndHospitalOrigem);
            TextView textViewHospitalDestino = (TextView) findViewById(R.id.atendimentoEnvolvidoTextEndHospitalDestino);
            TextView textViewHospitalNomeOrigem = (TextView) findViewById(R.id.atendimentoEnvolvidoTextNomeHospitalOrigem);
            TextView textViewHospitalNomeDestino = (TextView) findViewById(R.id.atendimentoEnvolvidoTextNomeHospitalDestino);

            if (BuildConfig.FLAVOR == "unimedBH") {
                try {
                    //COMENTAR PARA CLIENTES QUE NAO SAO UNIMEDBH
//                    TextView textViewHospitalContatoOrigem = (TextView) findViewById(R.id.atendimentoEnvolvidoTextEndContatoOrigem);
//                    TextView textViewHospitalContatoDestino = (TextView) findViewById(R.id.atendimentoEnvolvidoTextEndContatoDestino);
//
//                    textViewHospitalContatoDestino.setText(Tools.verificarValorString(e.getContatoDestino(), ""));
//                    textViewHospitalContatoOrigem.setText(Tools.verificarValorString(e.getContatoOrigem(), ""));
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }

            textViewNome.setText(e.getDsNomeEnv());

            String endOrigem = Tools.verificarValorString(e.getDsEnderecoOrigem(), " - ") +
                    " " + Tools.verificarValorString(e.getNrNumeroOrigem(), "S/N") +
                    " " + Tools.verificarValorString(e.getDsBairroOrigem(), "-") +
                    " " + Tools.verificarValorString(e.getDsMunicipioOrigem(), "-");

            String endDestino = Tools.verificarValorString(e.getDsEnderecoDestino(), " - ") +
                    " " + Tools.verificarValorString(e.getNrNumeroDestino(), "S/N") +
                    " " + Tools.verificarValorString(e.getDsBairroDestino(), "-") +
                    " " + Tools.verificarValorString(e.getDsMunicipioDestino(), "-");

            textViewHospitalNomeDestino.setText(e.getDsHospitalDestino());
            textViewHospitalNomeOrigem.setText(e.getDsHospitalOrigem());


            if (Tools.getStringResourceValidation(getString(R.string.ENDERECO_ORIGEM_PRE_HOSPITALAR_UNIMEDBH))) {
                if (o.getCdTipoAtendimento() == 2) {
                    textViewHospitalOrigem.setText(" ");
                    textViewHospitalNomeOrigem.setText(o.toEnderecoComComplementoReferencia());
                } else {
                    textViewHospitalOrigem.setText(endOrigem);
                }
            } else {
                textViewHospitalOrigem.setText(endOrigem);
            }
            textViewHospitalDestino.setText(endDestino);

            textViewSexo.setText(e.getIdSexo() == null || e.getIdSexo().isEmpty() ? "" : "M".equals(e.getIdSexo()) ? "MASCULINO" : "FEMININO");

            ImageView iv = (ImageView) findViewById(R.id.atendimentoEnvolvidoImageView);

            new ROTINA_MONITORAMENTO(this).execute(e.getIdEnvolvidoDesp());

//            new AsyncUploadImage(iv).execute(Config.SERVER_URL + "envolvido/getTipoMonitoramento/" + u.getUser() + "/" + u.getPass() + "/" + e.getIdEnvolvidoDesp() + "/");

        } catch (Exception ex) {
            Tools.popMenssage(this, getString(R.string.FORMULARIO_SEM_INFORMCAO_WEBSERVICE));
        }

    }

    void _configListaFormularios(final UsuarioEnvolvidoWap ue) {

        ImageButton abrirDocumentobtn = (ImageButton) findViewById(R.id.abrirDocumentobtn);
        abrirDocumentobtn.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {

                Intent it = new Intent();
                it.addFlags(Intent.FLAG_ACTIVITY_NO_USER_ACTION);
                it.putExtra("idEnvolvido", ue.e.getIdEnvolvidoDesp());
                it.setClass(AtendimentoEnvolvido.this, PainelDocumento.class);
                startActivity(it);
            }
        });
//        ue.oa.u.setCargo("7");
        final String cargo = ue.oa.u.getCdCargo();


        final ListView listView = (ListView) findViewById(R.id.atendimentoEnvolvidoListaFormularios);

        new ROTINA_PARAMETROS_FORMS_ENVOLVIDO(AtendimentoEnvolvido.this, ue, listView).execute();

    }

    private class ROTINA_PARAMETROS_FORMS_ENVOLVIDO extends Workflow<Void, String, List<String>> {

        private final UsuarioEnvolvidoWap ue;
        private final ListView listView;


        public ROTINA_PARAMETROS_FORMS_ENVOLVIDO(Context ctx, UsuarioEnvolvidoWap ue, ListView listView) {
            super(ctx);
            this.ue = ue;
            this.listView = listView;
        }

        @Override
        protected List<String> doInBackground(Void... voids) {
            List<String> retorno = new ArrayList<>();
            String parametro = EcopsService.getInstance(context).parametro(ue.oa.u, "FL_SHOW_DADOS_GERAIS");
            if ("S".equals(parametro)) {
                retorno.add("FL_SHOW_DADOS_GERAIS");
            }
            parametro = EcopsService.getInstance(context).parametro(ue.oa.u, "FL_SHOW_SINAIS_VITAIS");
            if ("S".equals(parametro)) {
                retorno.add("FL_SHOW_SINAIS_VITAIS");
            }
            parametro = EcopsService.getInstance(context).parametro(ue.oa.u, "FL_SHOW_EVOLUCAO_MED");
            if ("S".equals(parametro)) {
                retorno.add("FL_SHOW_EVOLUCAO_MED");
            }
            parametro = EcopsService.getInstance(context).parametro(ue.oa.u, "FL_SHOW_EVOLUCAO_ENF");
            if ("S".equals(parametro)) {
                retorno.add("FL_SHOW_EVOLUCAO_ENF");
            }
            parametro = EcopsService.getInstance(context).parametro(ue.oa.u, "FL_SHOW_OBSERVACOES");
            if ("S".equals(parametro)) {
                retorno.add("FL_SHOW_OBSERVACOES");
            }
            return retorno;
        }

        @Override
        protected void onPostExecute(List<String> forms) {
            super.onPostExecute(forms);
            _addFormsEnvolvido(forms, ue, listView);
        }
    }


    void _addFormsEnvolvido(List<String> forms, UsuarioEnvolvidoWap ue, ListView listView) {

        ArrayAdapter<String> adapter = new ArrayAdapter<String>(this, android.R.layout.simple_list_item_1, android.R.id.text1);

        final Intent it = new Intent();
        it.addFlags(Intent.FLAG_ACTIVITY_NO_USER_ACTION);
        it.putExtra("envolvido", ue.e);
        it.putExtra("usuario", ue.oa.u);
        it.putExtra("envolvidosamu", ue.es);
        it.putExtra("ocorrenciaAtendimento", ue.oa);
        it.putExtra("parametroMedico", parametroMedico);
        it.putExtra("parametroEnfermeiro", parametroEnfermeiro);
        it.putExtra("parametroTecEnfermagem", parametroTecEnfermagem);

        ListaFormularios listaFormularios = new ListaFormularios(AtendimentoEnvolvido.this, this, it, adapter, BuildConfig.FLAVOR, forms);

        listView.setAdapter(adapter);

        listView.setOnItemClickListener(listaFormularios);

        new ROTINA_CONSULTAR_OBSERVACAO(this).execute(ue);
    }

    void _consultaParametrosCargos() {
        new ROTINA_PARAMETRO_MEDICO(AtendimentoEnvolvido.this).execute();
        new ROTINA_PARAMETRO_ENFERMEIRO(AtendimentoEnvolvido.this).execute();
        new ROTINA_PARAMETRO_TEC_ENF(AtendimentoEnvolvido.this).execute();
    }

    public boolean isStoragePermissionGranted() {
        if (Build.VERSION.SDK_INT >= 23) {
            if (checkCallingOrSelfPermission(android.Manifest.permission.WRITE_EXTERNAL_STORAGE)
                    == PackageManager.PERMISSION_GRANTED) {
                return true;
            } else {
                ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, 1);
                return false;
            }
        } else { //permission is automatically granted on sdk<23 upon installation

            return true;
        }
    }

    private String getNameFromURI(Uri uri) {
        Cursor c = getContentResolver().query(uri, null, null, null, null);
        if(c != null) {
            c.moveToFirst();
            return c.getString(c.getColumnIndex(OpenableColumns.DISPLAY_NAME));
        }
        return  uri.getLastPathSegment();
    }

    public String getPath(Uri uri) {
        String[] projection = { MediaStore.Images.Media.DATA };
        Cursor cursor = context.getContentResolver().query(uri, projection, null, null, null);
        int column_index = cursor.getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
        cursor.moveToFirst();
        return cursor.getString(column_index);
    }

    void _formularioDescricaoDocumento(Uri pathFile, Constants.Media media) {
        EnvolvidoDocumento documento = new EnvolvidoDocumento();
        Usuario usuario = uew.oa.u;
        try {
            LogEcops.debug("init rotation modification...");
            ByteArrayOutputStream stream = new ByteArrayOutputStream();
            String nomeFile = getNameFromURI(pathFile);
            String uriString = "";

            if (media == Constants.Media.VIDEO) {
                try {
                    InputStream targetStream = getContentResolver().openInputStream(pathFile);
                    int nRead;
                    byte[] data = new byte[16384];

                    while ((nRead = targetStream.read(data, 0, data.length)) != -1) {
                        stream.write(data, 0, nRead);
                    }

                    uriString = getPath(pathFile);

                    /*bmThumbnail =  MediaStore.Video.Thumbnails.getThumbnail(getContentResolver(),
                            ContentUris.parseId(pathFile),
                            MediaStore.Images.Thumbnails.MICRO_KIND,
                            null);*/

                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                }

            } else if (media == Constants.Media.AUDIO) {

                try {
                    File f = new File(pathFile.toString());
                    if (!f.exists()) return;
                    InputStream targetStream = new FileInputStream(f);
                    int nRead;
                    byte[] data = new byte[16384];

                    while ((nRead = targetStream.read(data, 0, data.length)) != -1) {
                        stream.write(data, 0, nRead);
                    }
                    uriString = pathFile.toString();
                    nomeFile = f.getName();
                } catch (FileNotFoundException e) {
                    e.printStackTrace();
                } catch (IOException e) {
                    e.printStackTrace();
                }


            } else {
                try {
                    File f = new File(pathFile.toString());
                    if (!f.exists()) return;
                    InputStream targetStream = new FileInputStream(f);
                    BitmapFactory.Options options = new BitmapFactory.Options();
                    options.inPreferredConfig = Bitmap.Config.ARGB_8888;
                    options.inSampleSize = 8;
                    //Bitmap bitmap = BitmapFactory.decodeFile(pathFile, options);
                    Bitmap bitmap = BitmapFactory.decodeStream(targetStream, null, options);
                    Bitmap fixOrientationBitmap = fixOrientation(bitmap);
                    LogEcops.debug("meio  rotation modification...");
                    fixOrientationBitmap.compress(Bitmap.CompressFormat.PNG, 100, stream);
                    uriString = pathFile.toString();
                    nomeFile = f.getName();
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }



            /*byte[] stream = new byte[0];
            try {
                stream = Tools.read(f);
            } catch (IOException e) {
                e.printStackTrace();
            }*/


            /*FileInputStream is = new FileInputStream(new File(f.getPath()));

				ByteArrayOutputStream buffer = new ByteArrayOutputStream();

				int nRead;
				byte[] data = new byte[(int)f.length()];

				while ((nRead = is.read(data, 0, data.length)) != -1) {
					buffer.write(data, 0, nRead);
				}

				buffer.flush();*/

            LogEcops.debug("finish  rotation modification...");
//				RandomAccessFile raf = new RandomAccessFile(f, "r");
//				byte[] b = new byte[(int)f.length()];
//				raf.read(byteArray);

            String usrInclusao = uew.oa.u.getNmAbrevUsuario();
            int nrChamado = Integer.valueOf(uew.oa.ocorrencia.getDespachoAndamentoPK().getNrChamado());
            int idEnvolvido = Integer.valueOf(uew.oa.getListaEnvolvido().get(0).getIdEnvolvidoDesp());
            int idDespacho = Integer.valueOf(uew.oa.ocorrencia.getDespachoAndamentoPK().getNrDespacho());
            int idNrDdd = Integer.valueOf(uew.oa.ocorrencia.getDespachoAndamentoPK().getNrDdd());
            int idNrTelefone = Integer.valueOf(uew.oa.ocorrencia.getDespachoAndamentoPK().getNrTelefone());

            documento.setNrChamado(nrChamado);
            documento.setNrDespacho(idDespacho);
            documento.setIdEnvolvido(idEnvolvido);
            documento.setImgDocumento(stream.toByteArray());
            //documento.setImgDocumento(stream);
            documento.setNrDdd(idNrDdd);
            documento.setNrTelefone(idNrTelefone);
            documento.setNmNomeExtensaoArquivo(nomeFile);
            documento.setDtInclus(new Date().getTime());
            documento.setUsrInclusao(usrInclusao);
            documento.setUriString(uriString);
            documento.setMedia(media);

            _dialogDescricaoDocumentoEnviarWebservice(uew.etd, documento);

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    void _dialogDescricaoDocumentoEnviarWebservice(List<EnvolvidoTipoDocumento> lista, final EnvolvidoDocumento documento) {
        final Dialog dialog = new Dialog(this, R.style.ThemeDialogUser);

        dialog.setContentView(R.layout.tela_popup_atendimento_documento);
        dialog.setTitle("DESCRIÇÃO DOCUMENTO");
        dialog.setCancelable(false);

        ImageView imageView = (ImageView) dialog.findViewById(R.id.telaPopUpAtendimentoDocumentoImageView);
        Bitmap mBitmap = BitmapFactory.decodeByteArray(documento.getImgDocumento(), 0, documento.getImgDocumento().length);
        imageView.setImageBitmap(mBitmap);

        ListView listaViewTipoDoc = (ListView) dialog.findViewById(R.id.telaPopUpAtendimentoTipoDocumentoListView);
        final ArrayAdapter<EnvolvidoTipoDocumento> adapter = new ArrayAdapter<EnvolvidoTipoDocumento>(this, R.layout.item_lista_tipo_documento, R.id.itemListaTipoDocumentoTextView, lista) {
            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                try {
                    EnvolvidoTipoDocumento etd = getItem(position);

                    ViewHolder viewHolder;
                    if (convertView == null) {
                        viewHolder = new ViewHolder();
                        LayoutInflater inflater = LayoutInflater.from(getContext());
                        convertView = inflater.inflate(R.layout.item_lista_tipo_documento, parent, false);
                        viewHolder.name = (TextView) convertView.findViewById(R.id.itemListaTipoDocumentoTextView);
                        // Cache the viewHolder object inside the fresh view
                        convertView.setTag(viewHolder);
                    } else {
                        // View is being recycled, retrieve the viewHolder object from tag
                        viewHolder = (ViewHolder) convertView.getTag();
                    }

                    /*View view = super.getView(position, convertView, parent);
                    TextView textView = (TextView) view.findViewById(R.id.itemListaTipoDocumentoTextView);
                    textView.setText(etd.getDsTipoDocumento());
                    textView.setId((int) etd.getIdTipoDocumento());*/

                    viewHolder.name.setText(etd.getDsTipoDocumento());

                    return convertView;
                } catch (Exception e) {
                    e.printStackTrace();
                }
                return null;
            }
        };

        listaViewTipoDoc.setAdapter(adapter);
        listaViewTipoDoc.setOnItemClickListener(new OnItemClickListener() {

            @Override
            public void onItemClick(final AdapterView<?> arg0, View arg1, final int arg2, final long arg3) {
                RadioButton cb = (RadioButton) arg1.findViewById(R.id.itemListaTipoDocumentoCheckBox);
                cb.setChecked(!cb.isChecked());
                Button buttonOk = (Button) dialog.findViewById(R.id.telaPopUpAtendimentoDocumentoButtonOK);
                buttonOk.setEnabled(true);
                buttonOk.setOnClickListener(new OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        EditText editText = (EditText) dialog.findViewById(R.id.telaPopUpEventoTextViewKM);
                        if (editText.getText().length() > 0) {
                            documento.setDsDocumento(editText.getText().toString());
                            documento.setCdTipoDocumento((int) adapter.getItem(arg2).getIdTipoDocumento());
                            dialog.dismiss();
                            new ROTINA_ENVIAR_DOCUMENTO(AtendimentoEnvolvido.this).execute(documento);
                        } else {
                            Tools.popMenssage(AtendimentoEnvolvido.this, "Favor escrever uma descrição do documento...");
                        }
                    }
                });

            }
        });

        dialog.show();
    }

    int radioSelected;

    void _dialogEnvolvidoTermoFm(List<EnvolvidoTipoTermoFm> lista) {
        final Dialog dialog = new Dialog(this, R.style.ThemeDialogUser);
        dialog.setContentView(R.layout.tela_popup_termo_fm);
        dialog.setTitle("Descrição Tipo Termo Fm");
        //dialog.setCancelable(false);


        final ListView listaViewTipoDoc = (ListView) dialog.findViewById(R.id.telaPopUpAtendimentoTipoTermoFmListView);
        final ArrayAdapter<EnvolvidoTipoTermoFm> adapterTipoTermoFm = new ArrayAdapter<EnvolvidoTipoTermoFm>(this, R.layout.item_lista_tipo_documento, R.id.itemListaTipoDocumentoTextView, lista) {
            @Override
            public View getView(int position, View convertView, ViewGroup parent) {
                try {
                    View view = super.getView(position, convertView, parent);
                    EnvolvidoTipoTermoFm etd = getItem(position);
                    TextView textView = (TextView) view.findViewById(R.id.itemListaTipoDocumentoTextView);
                    textView.setText(etd.getDsTipoTermoFM());
                    textView.setId((int) etd.getCdTipoTermoFM());
                    return view;
                } catch (Exception e) {
                    e.printStackTrace();
                }
                return null;
            }
        };


        listaViewTipoDoc.setAdapter(adapterTipoTermoFm);
        listaViewTipoDoc.setOnItemClickListener(new OnItemClickListener() {

            @Override
            public void onItemClick(final AdapterView<?> arg0, View arg1, final int arg2, final long arg3) {
                marcarItem(listaViewTipoDoc, arg2);
                radioSelected = arg2;
            }
        });

        Button buttonOk = (Button) dialog.findViewById(R.id.telaPopUpAtendimentoTipoTermoFmSalvar);
        buttonOk.setEnabled(true);
        buttonOk.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                uew.idTipoTermoFm = (int) adapterTipoTermoFm.getItem(radioSelected).getCdTipoTermoFM();
                ROTINA_ENVIAR_TERMOFM rotina = new ROTINA_ENVIAR_TERMOFM(dialog.getContext());
                rotina.execute(uew);
                dialog.dismiss();
            }
        });
        dialog.show();
    }

    void marcarItem(ListView listaViewTipoDoc, int selecionado) {
        for (int i = 0; i < listaViewTipoDoc.getChildCount(); i++) {
            RadioButton cb = (RadioButton) listaViewTipoDoc.getChildAt(i).findViewById(R.id.itemListaTipoDocumentoCheckBox);
            cb.setChecked(i == selecionado);
        }
    }


    void _configuracaoButtonsStateOcorrencia(final OcorrenciaAtendimento oa) {

        new ROTINA_BOTAO_LIBERAR(AtendimentoEnvolvido.this).execute();

        try {
            int idFase = (oa.ocorrencia.getIdFasesEmpenhos() != null) ? oa.ocorrencia.getIdFasesEmpenhos() : 0;
            alterarBotaoLiberar((idFase > 0
                    && FaseEmpenho.getProximo(idFase).getTipoFaseEmpenho() == TipoFaseEmpenho.LIBERACAO)
                    || FaseEmpenho.getProximo(idFase) == FaseEmpenho.IH_SAIDA_HOSPITAL_ORIGEM || FaseEmpenho.getProximo(idFase) == FaseEmpenho.BR_SAIDA_HOSPITAL_ORIGEM
                    || FaseEmpenho.getProximo(idFase) == FaseEmpenho.IH_CHEGADA_HOSPITAL_DESTINO || FaseEmpenho.getProximo(idFase) == FaseEmpenho.BR_CHEGADA_HOSPITAL_DESTINO
                    || (idFase == FaseEmpenho.PH_SAIDA_LOCAL.getCodigo() && uew.e.getCdDestino() == 0)
                    || (idFase == FaseEmpenho.PH_ATENDIMENTO_ANDAMENTO.getCodigo() && !"zelo".equals(BuildConfig.FLAVOR)));


        } catch (NullPointerException ex) {
            ex.printStackTrace();
        }

        long idChamado = Long.valueOf(oa.ocorrencia.getDespachoAndamentoPK().getNrChamado()).longValue();
        SQLiteDatabase database = Persistencia.getInstance(this).getDatabase();
        AtendimentoFaseEmpenhoDAO dao = new AtendimentoFaseEmpenhoDAO(database);

        Tools.visibleImageButton(this, R.id.atendimentoDataLiberado, false);
//        LogEcops.debug("botaoLiberarFlag aqui que eu fico invisisvel?");

        Tools.visibleImageButton(this, R.id.atendimentoAtendimentoAndamento, false);


        if (oa.ocorrencia.getCdTipoAtendimento() != null) { // caso não envie este dado verificar se o banco esta com a coluna ou atualizado para mudanca de fase ...
            if (oa.ocorrencia.getCdTipoAtendimento() != 1) { //PRE-HOSPITALAR
                if (BuildConfig.FLAVOR != "gcmembu" && BuildConfig.FLAVOR != "unimedBH"
                        && !"arcelor".equals(BuildConfig.FLAVOR)
                        && !"sespdemo".equals(BuildConfig.FLAVOR)) {
                    Tools.visibleImageButton(this, R.id.atendimentoAtendimentoAndamento, true);
                }
                ImageButton button1 = (ImageButton) findViewById(R.id.atendimentoAtendimentoAndamento);
                button1.setOnClickListener(new OnClickListener() {
                    @Override
                    public void onClick(View v) {

                        SomRecursoEmAndamento.getInstance().finalizarSom();
                        final AtendimentoFaseEmpenho afe = new AtendimentoFaseEmpenho(oa);
                        final EventoAtendimentoFaseWapper eafw = new EventoAtendimentoFaseWapper(afe, oa.u);
                        try {
                            eafw.botao = TIPO_BOTAO.ATENDIMENTO_CONCLUIDO;
                            eafw.fase.tipoBotao = csi.android.ecops.dominio.AtendimentoFaseEmpenho.TIPO_BOTAO.ATENDIMENTO_CONCLUIDO;
                            if (TrabalhoRecurso.getInstance().getRecurso().respostaBrasiltrack != null) {

                                RastreadorBrasilTrack pontoRastreador = TrabalhoRecurso.getInstance().getRecurso().respostaBrasiltrack.getPrimeiroItem();
                                String kmBrasiltrak = pontoRastreador.hodometro;
                                String latitude = pontoRastreador.latitude;
                                String longitude = pontoRastreador.longitude;
                                eafw.fase.setKm(Long.valueOf(kmBrasiltrak));
                                eafw.fase.setLatitude(latitude);
                                eafw.fase.setLongitude(longitude);

                            }
                            eafw.fase.isSynchronized = false;
                            eafw.fase.setIdFasesEmpenhos(FaseEmpenho.PH_ATENDIMENTO_ANDAMENTO.getCodigo());

                            if (Connectivity.isConnected(AtendimentoEnvolvido.this)) {
                                new ROTINA_ENVIAR_MUDANCA_FASE(AtendimentoEnvolvido.this).execute(eafw);
                            } else {
                                new ROTINA_ENVIAR_MUDANCA_FASE_PERSISTENCIA(AtendimentoEnvolvido.this).execute(eafw);
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                    }
                });
            } else {
                Tools.visibleImageButton(this, R.id.atendimentoAtendimentoAndamento, null);
            }

            if (flagExibeBotaoLiberar && !"arcelor".equals(BuildConfig.FLAVOR)
                    && !"sespdemo".equals(BuildConfig.FLAVOR)) {
                Tools.visibleImageButton(this, R.id.atendimentoDataLiberado, true);
            }


            final ImageButton button2 = (ImageButton) findViewById(R.id.atendimentoDataLiberado);

            button2.setOnClickListener(new OnClickListener() {
                @Override
                public void onClick(View v) {
                    final AtendimentoFaseEmpenho afe = new AtendimentoFaseEmpenho(oa);
                    boolean hasHospitalDestino = oa.getListaEnvolvido().get(0).getIdHospitalDestino() != null && oa.getListaEnvolvido().get(0).getIdHospitalDestino() > 0;
                    final EventoAtendimentoFaseWapper eafw = new EventoAtendimentoFaseWapper(afe, oa.u, hasHospitalDestino);
                    /*try {
                        RastreadorBrasilTrack pontoRastreador = TrabalhoRecurso.getInstance().getRecurso().respostaBrasiltrack.getPrimeiroItem();
                        String kmBrasiltrak = pontoRastreador.hodometro;
                        String latitude = pontoRastreador.latitude;
                        String longitude = pontoRastreador.longitude;
                        eafw.fase.setKm(Long.valueOf(kmBrasiltrak));
                        eafw.fase.setLatitude(latitude);
                        eafw.fase.setLongitude(longitude);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }*/
                    eafw.botao = TIPO_BOTAO.LIBERADO;
                    eafw.fase.isSynchronized = false;


                    if (Connectivity.isConnected(AtendimentoEnvolvido.this)) {
                        new ROTINA_ENVIAR_MUDANCA_FASE(AtendimentoEnvolvido.this).execute(eafw);
                    } else {
                        new ROTINA_ENVIAR_MUDANCA_FASE_PERSISTENCIA(AtendimentoEnvolvido.this).execute(eafw);
                    }
                }
            });
        }
    }

    private class ROTINA_MONITORAMENTO extends Workflow<Integer, Void, String> {

        public ROTINA_MONITORAMENTO(Context ctx) {
            super(ctx, false);
        }

        @Override
        protected String doInBackground(Integer... integers) {
            Integer env = integers[0];
            String resposta = EcopsService.getInstance(getBaseContext()).consultaMonitoramentoEnvolvido(env);
            return resposta;
        }

        @Override
        protected void onPostExecute(String s) {
            if (s != null && !"null".equals(s)) {
                TextView txt = (TextView) findViewById(R.id.textView7);
                txt.setVisibility(View.VISIBLE);
                txt = (TextView) findViewById(R.id.atendimentoEnvolvidoTextMon);
                txt.setVisibility(View.VISIBLE);
                txt.setText(s);
            }
            super.onPostExecute(s);
        }
    }


    private class ROTINA_PARAMETRO_TEC_ENF extends Workflow<Void, String, String> {

        public ROTINA_PARAMETRO_TEC_ENF(Context ctx) {
            super(ctx);
        }

        @Override
        protected String doInBackground(Void... voids) {
            String parametroTecEnfermagem = EcopsService.getInstance(context).parametroCargoTecEnfe();
            return parametroTecEnfermagem;
//            return super.doInBackground(voids);
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);
            parametroTecEnfermagem = s;

        }
    }

    private class ROTINA_PARAMETRO_ENFERMEIRO extends Workflow<Void, String, String> {

        public ROTINA_PARAMETRO_ENFERMEIRO(Context ctx) {
            super(ctx);
        }

        @Override
        protected String doInBackground(Void... voids) {
            String parametroEnfermeiro = EcopsService.getInstance(context).parametroCargoEnfermeiro();
            return parametroEnfermeiro;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);
            parametroEnfermeiro = s;

        }
    }

    private class ROTINA_PARAMETRO_MEDICO extends Workflow<Void, String, String> {

        public ROTINA_PARAMETRO_MEDICO(Context ctx) {
            super(ctx);
        }

        @Override
        protected String doInBackground(Void... voids) {
            String parametroMedico = EcopsService.getInstance(context).parametroCargoMedico();
            return parametroMedico;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);
            parametroMedico = s;
        }
    }

    private class ROTINA_BOTAO_LIBERAR extends Workflow<Void, Void, Boolean> {


        public ROTINA_BOTAO_LIBERAR(Context ctx) {
            super(ctx);
        }

        @Override
        protected Boolean doInBackground(Void... voids) {

            Boolean parametroExibeBotaoLiberar = EcopsService.getInstance(context).parametroExibeBotaoLiberar();
            return parametroExibeBotaoLiberar;
//            return super.doInBackground(voids);
        }

        @Override
        protected void onPostExecute(Boolean aBoolean) {
            super.onPostExecute(aBoolean);
            flagExibeBotaoLiberar = aBoolean;
            try {
                int idFase = (uew.oa.ocorrencia.getIdFasesEmpenhos() != null) ? uew.oa.ocorrencia.getIdFasesEmpenhos() : 0;
                alterarBotaoLiberar((idFase > 0
                        && FaseEmpenho.getProximo(idFase).getTipoFaseEmpenho() == TipoFaseEmpenho.LIBERACAO && FaseEmpenho.getProximo(idFase).getCodigo() != null)
                        || FaseEmpenho.getProximo(idFase) == FaseEmpenho.IH_SAIDA_HOSPITAL_ORIGEM || FaseEmpenho.getProximo(idFase) == FaseEmpenho.BR_SAIDA_HOSPITAL_ORIGEM
                        || FaseEmpenho.getProximo(idFase) == FaseEmpenho.IH_CHEGADA_HOSPITAL_DESTINO || FaseEmpenho.getProximo(idFase) == FaseEmpenho.BR_CHEGADA_HOSPITAL_DESTINO
                        || (idFase == FaseEmpenho.PH_SAIDA_LOCAL.getCodigo() && uew.e.getCdDestino() == 0)
                        || (idFase == FaseEmpenho.PH_ATENDIMENTO_ANDAMENTO.getCodigo() && !"zelo".equals(BuildConfig.FLAVOR)));

            } catch (NullPointerException ex) {
                ex.printStackTrace();
            }
            LogEcops.debug("botaoLiberarFlag rodeu a rotina " + String.valueOf(flagExibeBotaoLiberar));
        }
    }


    private class ROTINA_CONSULTAR extends Workflow<UsuarioEnvolvidoWap, Void, UsuarioEnvolvidoWap> {

        public ROTINA_CONSULTAR(Context ctx) {
            super(ctx);
        }

        @Override
        protected UsuarioEnvolvidoWap doInBackground(UsuarioEnvolvidoWap... params) {

            UsuarioEnvolvidoWap ue = params[0];

            /*if(!EcopsService.wifiOu3G(ctx)) {
                return ue;
            }*/

            Resposta<EnvolvidoSamu> resposta = EcopsService.getInstance(getBaseContext()).consultarEnvolvidoSamu(ue.oa.u, ue.e);

            if (isNotNull(resposta) && resposta.contemDados()) {
                ue.es = resposta.getPrimeiroItem();
                return ue;
            }
            return null;

        }

        @Override
        protected void onPostExecute(UsuarioEnvolvidoWap result) {
            super.onPostExecute(result);
            if (isNotNull(result)) {
                _configListaFormularios(result);
                _configBotaoMapaRotas(result);
                _configBotaoEditEncaminhamento(result);
            } else {
                Tools.popUp(AtendimentoEnvolvido.this, getString(R.string.ERRO_GENERICO), "OK", new DialogInterface.OnClickListener() {

                    @Override
                    public void onClick(DialogInterface dialog, int which) {
                        AtendimentoEnvolvido.this.finish();
                    }
                }, "", null);
            }
        }
    }

    private class ROTINA_CONSULTAR_OBSERVACAO extends Workflow<UsuarioEnvolvidoWap, Void, Resposta> {

        public ROTINA_CONSULTAR_OBSERVACAO(Context ctx) {
            super(ctx, true);
        }

        @Override
        protected Resposta doInBackground(UsuarioEnvolvidoWap... params) {

            UsuarioEnvolvidoWap ue = params[0];
            Resposta<OcorrenciaObservacao> resposta = EcopsService.getInstance(getBaseContext()).consultarHistoricoObservacao(ue.oa.u, ue.es);
            if (isNotNull(resposta) && resposta.contemDados()) {
                ue.oa.getListOcorrenciaObservacao().clear();
                ue.oa.getListOcorrenciaObservacao().addAll(resposta.list);
                return resposta;
            }
            return null;
        }

        @Override
        protected void onPostExecute(Resposta result) {
            super.onPostExecute(result);
        }
    }

    public class ROTINA_CONSULTAR_DOCUMENTO_TIPO extends Workflow<UsuarioEnvolvidoWap, Void, Resposta> {

        public ROTINA_CONSULTAR_DOCUMENTO_TIPO(Context ctx) {
            super(ctx, false);
        }

        @Override
        protected Resposta doInBackground(UsuarioEnvolvidoWap... params) {

            UsuarioEnvolvidoWap ue = params[0];
            Resposta<EnvolvidoTipoDocumento> resposta = EcopsService.getInstance(getBaseContext()).consultarAtendimentoTipoDocumento(ue.oa.u);
            if (isNotNull(resposta) && resposta.contemDados()) {
                return resposta;
            }
            return null;
        }

        @Override
        protected void onPostExecute(Resposta result) {
            if (isNotNull(result) && result.contemDados()) {
                uew.etd = result.list;
                ((ImageButton) findViewById(R.id.atendimentoDadosCameraIntentImageButton)).setLongClickable(true);
                ((ImageButton) findViewById(R.id.atendimentoDadosGalleryMediaImageButton)).setLongClickable(true);
            } else {
                ((ImageButton) findViewById(R.id.atendimentoDadosCameraIntentImageButton)).setLongClickable(false);
                ((ImageButton) findViewById(R.id.atendimentoDadosCameraIntentImageButton)).setBackground(getResources().getDrawable(R.drawable.circle_button_cinza));
                ((ImageButton) findViewById(R.id.atendimentoDadosGalleryMediaImageButton)).setLongClickable(false);
                ((ImageButton) findViewById(R.id.atendimentoDadosGalleryMediaImageButton)).setBackground(getResources().getDrawable(R.drawable.circle_button_cinza));
            }
            super.onPostExecute(result);
        }
    }

    private class ROTINA_ATENDIMENTO_DOCUMENTOS extends Workflow<UsuarioEnvolvidoWap, Void, Resposta> {

        public ROTINA_ATENDIMENTO_DOCUMENTOS(Context ctx) {
            super(ctx, true);
        }

        @Override
        protected Resposta doInBackground(UsuarioEnvolvidoWap... params) {

            UsuarioEnvolvidoWap ue = params[0];
            Resposta<EnvolvidoDocumento> resposta = null;
            String idFile = uew.oa.ocorrencia.getDespachoAndamentoPK().getNrChamado() + "-" + uew.e.getIdEnvolvidoDesp().toString() + "-";
            int idDocumento = Tools.ultimoIdAtendimentoDocumento(idFile);

            //if(EcopsService.wifiOu3G(ctx)) {
            if (idDocumento != -1) {
                resposta = EcopsService.getInstance(getBaseContext()).consultarDocumentosApartirDoUltimoId(ue.oa.u, ue.e.getIdEnvolvidoDesp().toString(), idDocumento);
            } else {
                resposta = EcopsService.getInstance(getBaseContext()).consultarAtendimentoListaDocumentos(ue.oa.u, ue.e.getIdEnvolvidoDesp().toString());
            }
            //}

            if (isNotNull(resposta) && resposta.contemDados()) {
                return resposta;
            }
            return null;

        }

        @Override
        protected void onPostExecute(Resposta result) {
            if (isNotNull(result) && result.contemDados()) {
                for (EnvolvidoDocumento e : (List<EnvolvidoDocumento>) result.list) {
                    //TODO: VEIFICAR ANTES DE CRIAR SE ESTE ARQUIVO JÁ FOI BAIXADO ...
                    String idFile = uew.oa.ocorrencia.getDespachoAndamentoPK().getNrChamado() + "-" + uew.e.getIdEnvolvidoDesp().toString() + "-" + e.getCdDespachoDocumento() + "-";
                    if (!Tools.isDocumentoFileLocal(idFile)) {
                        Bitmap bitmap = BitmapFactory.decodeResource(context.getResources(), R.drawable.icon_download);
                        Tools.imagemSalvarLocal(bitmap, idFile);
                        GridView grid = (GridView) findViewById(R.id.atendimentoDadosGridViewImagens);
                        Tools.imagemUpdateGridView(AtendimentoEnvolvido.this, grid, idFile);
                        new ROTINA_DOWNLOAD_DOCUMENTO(AtendimentoEnvolvido.this).execute(e);
                    }
                }
            } else {

            }
            super.onPostExecute(result);

        }

    }

    private class ROTINA_DOWNLOAD_DOCUMENTO extends Workflow<EnvolvidoDocumento, Void, Resposta> {

        public ROTINA_DOWNLOAD_DOCUMENTO(Context ctx) {
            super(ctx, true);
        }

        @Override
        protected Resposta doInBackground(EnvolvidoDocumento... params) {

            EnvolvidoDocumento envolvidoDocumento = params[0];
            Usuario usuario = uew.oa.u;
            Resposta<EnvolvidoDocumento> resposta = EcopsService.getInstance(getBaseContext()).consultarAtendimentoDocumento(usuario, envolvidoDocumento);
            if (isNotNull(resposta) && resposta.contemDados()) {
                return resposta;
            }
            return null;
        }

        @Override
        protected void onPostExecute(Resposta result) {
            if (isNotNull(result) && result.contemDados()) {
                EnvolvidoDocumento ed = (EnvolvidoDocumento) result.getPrimeiroItem();
                String idFile = uew.oa.ocorrencia.getDespachoAndamentoPK().getNrChamado().toString() + "-" + uew.e.getIdEnvolvidoDesp() + "-" + ed.getCdDespachoDocumento() + "-";
                if (Tools.isDocumentoFileLocal(idFile)) {
                    String urlPath = Tools.getUrlNameDocumentoFileLocal(idFile);
                    Tools.imagemUpdateLocal(ed.getImgDocumento(), urlPath);
                    GridView grid = (GridView) findViewById(R.id.atendimentoDadosGridViewImagens);
                    grid.invalidateViews();
                }
            }
            super.onPostExecute(result);
        }
    }

    private class ROTINA_ENVIAR_DOCUMENTO extends Workflow<EnvolvidoDocumento, Void, Resposta> {

        public ROTINA_ENVIAR_DOCUMENTO(Context ctx) {
            super(ctx, true);
        }

        @Override
        protected Resposta doInBackground(EnvolvidoDocumento... params) {
            try {
                EnvolvidoDocumento documento = params[0];
                Usuario usuario = uew.oa.u;
                Resposta<String> resposta = EcopsService.getInstance(getBaseContext()).sincronizarAtendimentoDocumentos(usuario, documento);
                if (isNotNull(resposta) && resposta.contemDados()) {
                    Short id = Short.valueOf(resposta.getPrimeiroItem().trim());
                    LogEcops.debug("ROTINA_DOWNLOAD_DOCUMENTO Id documento: " + id);
                    documento.setCdDespachoDocumento(id);
                    return new Resposta(documento);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

        @Override
        protected void onPostExecute(Resposta result) {
            if (isNotNull(result) && result.contemDados()) {
                EnvolvidoDocumento ed = (EnvolvidoDocumento) result.getPrimeiroItem();
                if (ed.getCdDespachoDocumento() <= 0) {
                    Tools.popMenssage(AtendimentoEnvolvido.this, "ID - DOCUMENTO NÃO FORNECIDO, verificar com suporte. id:" + ed.getCdDespachoDocumento());
                }

                Persistencia.getInstance(context).salvarDocumentoDespacho(ed, uew.e.getIdEnvolvidoDesp().toString());

                String idFile = uew.oa.ocorrencia.getDespachoAndamentoPK().getNrChamado().toString() + "-" + uew.e.getIdEnvolvidoDesp().toString() + "-";
                DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                String imgcurTime = dateFormat.format(new Date(ed.getDtInclus()));
                //String _path = Config.PATH_DOCUMENTOS +idFile+ imgcurTime + ".jpg";
                Tools.imagemDeleteLocal(Config.PATH_DOCUMENTOS + namePhotoDocuments);
                String idFileSync = uew.oa.ocorrencia.getDespachoAndamentoPK().getNrChamado().toString() + "-" + uew.e.getIdEnvolvidoDesp().toString() + "-" + ed.getCdDespachoDocumento() + "-";
                Tools.imagemSalvarLocal(ed.getImgDocumento(), idFileSync);

                Tools.popMenssage(AtendimentoEnvolvido.this, "Documento Sincronizado...");
                _configGridViewDocumentosLocal(uew.e);
            }
            super.onPostExecute(result);
            ///storage/emulated/0/ecops-mobile/atendimento/180-152-2015-09-04 10:18:35.jpg
        }

    }

    public static enum TIPO_BOTAO {LIBERADO, ATENDIMENTO_CONCLUIDO}


    class EventoAtendimentoFaseWapper {

        public AtendimentoFaseEmpenho fase;
        public Usuario usuario;
        public boolean hasHospitalDestino;
        public TIPO_BOTAO botao;

        public EventoAtendimentoFaseWapper(AtendimentoFaseEmpenho fase, Usuario usuario) {
            this(fase, usuario, false);
        }

        public EventoAtendimentoFaseWapper(AtendimentoFaseEmpenho fase, Usuario usuario, boolean hasHospitalDestino) {
            super();
            this.fase = fase;
            this.usuario = usuario;
            this.hasHospitalDestino = hasHospitalDestino;
        }

    }


    private class ROTINA_ENVIAR_MUDANCA_FASE_PERSISTENCIA extends Workflow<EventoAtendimentoFaseWapper, Void, Resposta<EventoAtendimentoFaseWapper>> {

        public ROTINA_ENVIAR_MUDANCA_FASE_PERSISTENCIA(Context ctx) {
            super(ctx);
        }

        @Override
        protected Resposta doInBackground(EventoAtendimentoFaseWapper... params) {
            try {
                EventoAtendimentoFaseWapper efw = params[0];

                /*if (efw.fase.getKm() <= 0 || efw.fase.getLatitude() == null || efw.fase.getLongitude() == null) { //  se a informação não estiver presente  é necessario informar como log para o sistema ...
                    efw.fase.isLogAtendimento = true;

                    AtendimentoFaseEmpenhoDAO dao = new AtendimentoFaseEmpenhoDAO(Persistencia.getInstance(AtendimentoEnvolvido.this).getDatabase());
                    int faseAtual = dao.consultaFaseAtualWebservice(efw.usuario, efw.fase, uew.oa.ocorrencia);
                    LogEcops.debug("sincronizarAtendimentoLog: faseAtual" + faseAtual);
                    efw.fase.setIdFasesEmpenhos(faseAtual);

                    boolean retornoLog = EcopsService.getInstance(getBaseContext()).sincronizarAtendimentoFaseEmpenhoLog(efw.usuario, efw.fase.getAtendimentoLog());
                    LogEcops.debug("sincronizarAtendimentoLog " + retornoLog);
                    return new Resposta(null, AtendimentoEnvolvido.this.getString(R.string.MSG_SEM_DADOS_BRASILTRACK));
                }*/

                final Viatura viatura = TrabalhoRecurso.getInstance().getRecurso();
                if (viatura != null && viatura.respostaBrasiltrack != null && viatura.respostaBrasiltrack.contemDados()) {
                    long kmBrasiltrak = Long.valueOf(viatura.respostaBrasiltrack.getPrimeiroItem().hodometro);
                    efw.fase.setKm(kmBrasiltrak);
                }
                SQLiteDatabase db = Persistencia.getInstance(AtendimentoEnvolvido.this).getDatabase();
                AtendimentoFaseEmpenhoDAO dao = new AtendimentoFaseEmpenhoDAO(db);
                efw.fase.setDtFase(new Date().getTime());
                efw.fase.isLogAtendimento = false;
                efw.fase.tipoBotao = AtendimentoFaseEmpenho.TIPO_BOTAO.valueOf(efw.botao.name());

                int idFase = (uew.oa.ocorrencia.getIdFasesEmpenhos() != null) ? uew.oa.ocorrencia.getIdFasesEmpenhos() : 0;

                boolean sincronizarChamadoEmAtendimento = (idFase > 0
                        && FaseEmpenho.getProximo(idFase).getTipoFaseEmpenho() == TipoFaseEmpenho.LIBERACAO)
                        || FaseEmpenho.getProximo(idFase) == FaseEmpenho.IH_SAIDA_HOSPITAL_ORIGEM || FaseEmpenho.getProximo(idFase) == FaseEmpenho.BR_SAIDA_HOSPITAL_ORIGEM
                        || FaseEmpenho.getProximo(idFase) == FaseEmpenho.IH_CHEGADA_HOSPITAL_DESTINO || FaseEmpenho.getProximo(idFase) == FaseEmpenho.BR_CHEGADA_HOSPITAL_DESTINO
                        || (idFase == FaseEmpenho.PH_SAIDA_LOCAL.getCodigo() && uew.e.getCdDestino() == 0)
                        || idFase == FaseEmpenho.PH_ATENDIMENTO_ANDAMENTO.getCodigo();
                Boolean retorno = null;
                if (sincronizarChamadoEmAtendimento) {
                    retorno = dao.salvarAtendimentoFaseEmpenhoAsync(efw.fase);
                }

                if (retorno != null && retorno) {
                    return new Resposta<EventoAtendimentoFaseWapper>(efw);
                } else if (sincronizarChamadoEmAtendimento && retorno == null) {
                    return new Resposta(null, AtendimentoEnvolvido.this.getString(R.string.ERRO_ATENDIMENTO_DATABASES_GRAVAR));
                } else if (!sincronizarChamadoEmAtendimento) {
                    Tools.popUp(AtendimentoEnvolvido.this, "Aviso!", getString(R.string.MSG_SEM_RESPOSTA_FASE_ATUAL));
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

        @Override
        protected void onPostExecute(Resposta<EventoAtendimentoFaseWapper> result) {
            super.onPostExecute(result);


            if (result != null && result.contemDados() && !result.contemMsgErro()) {
                Tools.popMenssage(AtendimentoEnvolvido.this, getString(R.string.CONFIRMACAO_ENVIO_FORMULARIO));

                // TODO: APENAS PARA ATENDIMENTO CONCLUIDO ....
                switch (result.getPrimeiroItem().botao) {
                    case ATENDIMENTO_CONCLUIDO:
                        iTrabalho.setChegouLocalImageButton(true, AtendimentoEnvolvido.this);
                        AtendimentoEnvolvido.this.finish();
                        break;
                    case LIBERADO:
                        _finalizarAtendimento();

                        break;

                    default:
                        break;
                }
                //-------------------------------------------------------------------------------------------------------
            } else if (result != null && result.contemMsgErro()) {
                Tools.popUp(AtendimentoEnvolvido.this, result.getMsg());
            } else if (result == null) {
                Tools.popUp(AtendimentoEnvolvido.this, "Aviso!", getString(R.string.MSG_SEM_RESPOSTA_FASE_ATUAL));
            } else {
                Tools.popUp(AtendimentoEnvolvido.this, getString(R.string.ERRO_GENERICO_3G));
            }
        }

    }

    private class ROTINA_ENVIAR_MUDANCA_FASE extends Workflow<EventoAtendimentoFaseWapper, Void, Resposta<EventoAtendimentoFaseWapper>> {

        public ROTINA_ENVIAR_MUDANCA_FASE(Context ctx) {
            super(ctx);
        }

        @Override
        protected Resposta doInBackground(EventoAtendimentoFaseWapper... params) {
            try {
                EventoAtendimentoFaseWapper efw = params[0];

                final Viatura viatura = TrabalhoRecurso.getInstance().getRecurso();

                /*if (viatura != null && viatura.respostaBrasiltrack == null) {
                    //Força busca dos dados da BrasilTrack
                    try {
                        Resposta<RastreadorBrasilTrack> r = EcopsService.getInstance(getBaseContext()).consultarRastreadorVeiculo(new LoginViatura(efw.usuario, viatura));
                        if (r != null && r.contemDados()) {
                            viatura.respostaBrasiltrack = r;
                            try {
                                RastreadorBrasilTrack pontoRastreador = viatura.respostaBrasiltrack.getPrimeiroItem();
                                String kmBrasiltrak = pontoRastreador.hodometro;
                                String latitude = pontoRastreador.latitude;
                                String longitude = pontoRastreador.longitude;
                                efw.fase.setKm(Long.valueOf(kmBrasiltrak));
                                efw.fase.setLatitude(latitude);
                                efw.fase.setLongitude(longitude);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        } else {
                            //return new Resposta(null, AtendimentoEnvolvido.this.getString(R.string.MSG_SEM_DADOS_BRASILTRACK));
                            LogEcops.debug(AtendimentoEnvolvido.this.getString(R.string.MSG_SEM_DADOS_BRASILTRACK));
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }*/

                /*if (efw.fase.getKm() <= 0 || efw.fase.getLatitude() == null || efw.fase.getLongitude() == null) { //  se a informação não estiver presente  é necessario informar como log para o sistema ...
                    boolean retornoLog = EcopsService.getInstance(getBaseContext()).sincronizarAtendimentoFaseEmpenhoLog(efw.usuario, efw.fase.getAtendimentoLog());
                    LogEcops.debug("sincronizarAtendimentoLog " + retornoLog);
                    return new Resposta(null, AtendimentoEnvolvido.this.getString(R.string.MSG_SEM_DADOS_BRASILTRACK));
                }*/

                Resposta<AtendimentoFaseEmpenho> retornoFaseAtual = EcopsService.getInstance(getBaseContext()).consultarAtendimentoFaseAtual(efw.usuario, efw.fase);

                if (retornoFaseAtual != null && retornoFaseAtual.contemDados()) {

                    boolean isLiberacao = false;
                    boolean latencia = false;
                    boolean existsFase = false;

                    int id = (int) retornoFaseAtual.getPrimeiroItem().getIdFasesEmpenhos();

                    switch (efw.botao) {

                        case LIBERADO:

                            FaseEmpenho fe = FaseEmpenho.getProximo(id);

                            if (FaseEmpenho.getProximo(id).getCodigo() == 4
                                    || FaseEmpenho.getProximo(id).getCodigo() == 5
                                    ) {

                                fe = FaseEmpenho.IH_LIBERACAO;

                            } else if (FaseEmpenho.getProximo(id).getCodigo() == 20
                                    || FaseEmpenho.getProximo(id).getCodigo() == 21) {

                                fe = FaseEmpenho.BR_LIBERACAO;

                            } else if (fe == FaseEmpenho.PH_CHEGADA_HOSPITAL && !efw.hasHospitalDestino) {

                                fe = FaseEmpenho.PH_LIBERACAO_11;

                            } else if (id == 23 && uew.e.getCdDestino() == 0) {

                                fe = FaseEmpenho.PH_LIBERACAO_12;

                            } else if (id == 10) {

                                fe = FaseEmpenho.PH_LIBERACAO_10;

                            }

                            if (fe != null && fe.getTipoFaseEmpenho() == TipoFaseEmpenho.LIBERACAO) {

                                efw.fase.setIdFasesEmpenhos(fe.getCodigo());

                                isLiberacao = true;

                            } else if (fe == null && (fe = FaseEmpenho.getById(id)) != null && fe.getTipoFaseEmpenho() == TipoFaseEmpenho.LIBERACAO) {

                                existsFase = true;

                            } else if (retornoFaseAtual.getPrimeiroItem().isLatencia()) {

                                fe = FaseEmpenho.getFaseByTipo(TipoFaseEmpenho.LIBERACAO, fe.getTipoAtendimento());

                                if (fe.getPai() == FaseEmpenho.PH_CHEGADA_HOSPITAL && !efw.hasHospitalDestino) {
                                    fe = FaseEmpenho.PH_LIBERACAO_10;
                                } else if (fe.getPai() == FaseEmpenho.PH_SAIDA_LOCAL) {
                                    fe = FaseEmpenho.PH_LIBERACAO_12;
                                }


                                efw.fase.setIdFasesEmpenhos(fe.getCodigo());

                                latencia = true;

                            } else {

                                return new Resposta(null, getString(R.string.LIBERADO_MUDANCA_FASE_NAO_PERMITIDO));

                            }

                            break;

                        case ATENDIMENTO_CONCLUIDO:   //TODO: VERIFICAR COM O ANALISTA SE VAI TER UM RETORNO ...

                            FaseEmpenho feac = FaseEmpenho.getProximo(id);

                            if (feac != null && feac == FaseEmpenho.PH_ATENDIMENTO_ANDAMENTO) {

                                efw.fase.setIdFasesEmpenhos(feac.getCodigo());

                            } else if (feac == null && (feac = FaseEmpenho.getById(id)) != null && feac.getTipoFaseEmpenho() == TipoFaseEmpenho.ATENDIMENTO_ANDAMENTO
                                    || FaseEmpenho.filhaDe(feac, FaseEmpenho.PH_ATENDIMENTO_ANDAMENTO)) {

                                existsFase = true;

                            } else if (retornoFaseAtual.getPrimeiroItem().isLatencia()) {

                                efw.fase.setIdFasesEmpenhos(FaseEmpenho.PH_ATENDIMENTO_ANDAMENTO.getCodigo());

                                latencia = true;

                            } else if (feac.getTipoAtendimento() == TipoAtendimento.PRE_HOSPITALAR) {

                                return new Resposta(null, getString(R.string.ATENDIMENTO_MUDANCA_FASE_NAO_PERMITIDO));

                            } else {
                                return new Resposta(null, getString(R.string.MUDANCA_FASE_NAO_PERMITIDO).replaceAll("XXX", feac != null ? feac.getTipoFaseEmpenho().getDescricao() : "NENHUMA FASE ENCONTRADA"));
                            }

                            break;

                    }

                    if (viatura != null && viatura.respostaBrasiltrack != null && viatura.respostaBrasiltrack.contemDados()) {
                        long kmBrasiltrak = Long.valueOf(viatura.respostaBrasiltrack.getPrimeiroItem().hodometro);
                        efw.fase.setKm(kmBrasiltrak);
                    }

                    efw.fase.setDtFase(new Date().getTime());

                    boolean retorno = false;

                    if (existsFase) {

                        return new Resposta(null, "Essa fase já foi registrada!");

                    }
                    if (latencia) {

                        retorno = EcopsService.getInstance(getBaseContext()).sincronizarAtendimentoFaseEmpenhoLog(efw.usuario, efw.fase.getAtendimentoLog());


                    } else {

                        String resposta = EcopsService.getInstance(getBaseContext()).sincronizarFaseAtendimento(efw.usuario, efw.fase);
                        retorno = resposta.equals("true");
                        if (!retorno) {

                            AtendimentoFaseEmpenho fase = (AtendimentoFaseEmpenho) ConvertJsonForObject.getInstance().convert(resposta, AtendimentoFaseEmpenho.class);
                            if (fase.getIdFasesEmpenhos() == efw.fase.getIdFasesEmpenhos()) {
                                switch (efw.botao) {
                                    case ATENDIMENTO_CONCLUIDO:
                                        return new Resposta(null, "Essa fase já foi registrada!");
                                    case LIBERADO:
                                        return new Resposta(null, "Por favor aguarde liberação!");
                                    default:
                                        break;
                                }
                                return new Resposta(null, "Essa fase já foi registrada!");
                            } else {
                                return new Resposta(null, "O Atendimento está na fase " + FaseEmpenho.getById((int) fase.getIdFasesEmpenhos()).getTipoFaseEmpenho().getDescricao() + "!");
                            }
                        }


                    }

                    if (retorno) {
                        if (latencia) {
                            return new Resposta(null, efw.botao == TIPO_BOTAO.ATENDIMENTO_CONCLUIDO ? getString(R.string.ATENDIMENTO_MUDANCA_FASE_NAO_PERMITIDO) : getString(R.string.LIBERADO_MUDANCA_FASE_NAO_PERMITIDO));
                        }
                        if (isLiberacao) {
                            EcopsService.getInstance(getBaseContext()).inserirStatusViatura(efw.usuario, viatura, 2);
                            LogEcops.debug("EcopsService.getInstance(getBaseContext()).inserirStatusViatura 2");
                        }
                        return new Resposta(efw);
                    } else {
                        return new Resposta(null, getString(R.string.ERRO_GENERICO_3G));
                    }


                } else {
                    LogEcops.debug(AtendimentoEnvolvido.this.getString(R.string.MSG_SEM_RESPOSTA_FASE_ATUAL));
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

        @Override
        protected void onPostExecute(Resposta<EventoAtendimentoFaseWapper> result) {
            super.onPostExecute(result);


            if (result != null && result.contemDados() && !result.contemMsgErro()) {
                Tools.popMenssage(AtendimentoEnvolvido.this, getString(R.string.CONFIRMACAO_ENVIO_FORMULARIO));

                // TODO: APENAS PARA ATENDIMENTO CONCLUIDO ....
                switch (result.getPrimeiroItem().botao) {
                    case ATENDIMENTO_CONCLUIDO:
                        iTrabalho.setChegouLocalImageButton(true, AtendimentoEnvolvido.this);
                        AtendimentoEnvolvido.this.finish();
                        break;
                    case LIBERADO:
                        _finalizarAtendimento();
                        break;

                    default:
                        break;
                }
                //-------------------------------------------------------------------------------------------------------
            } else if (result != null && result.contemMsgErro()) {
                Tools.popUp(AtendimentoEnvolvido.this, result.getMsg());
            } else if (result == null) {
                Tools.popUp(AtendimentoEnvolvido.this, "Aviso!", getString(R.string.MSG_SEM_RESPOSTA_FASE_ATUAL));
            } else {
                Tools.popUp(AtendimentoEnvolvido.this, getString(R.string.ERRO_GENERICO_3G));
            }
        }

    }

    private class ROTINA_WIFI extends Workflow<UsuarioEnvolvidoWap, Void, UsuarioEnvolvidoWap> {
        public ROTINA_WIFI(Context ctx) {
            super(ctx);
        }

        @Override
        protected UsuarioEnvolvidoWap doInBackground(UsuarioEnvolvidoWap... params) {
            UsuarioEnvolvidoWap uew = params[0];

            return (EcopsService.wifiOu3G(ctx) ? uew : null);
        }

        @Override
        protected void onPostExecute(UsuarioEnvolvidoWap uew) {
            super.onPostExecute(uew);

            if (isNotNull(uew)) {

                Intent it = new Intent(AtendimentoEnvolvido.this, EnvolvidoMapaRota.class);
                it.addFlags(Intent.FLAG_ACTIVITY_NO_USER_ACTION);
                it.putExtra("ocorrenciaAtendimento", uew.oa);
                it.putExtra("envolvido", uew.e);
                it.putExtra("envolvidoSamu", uew.es);
                startActivity(it);

            } else {
                Toast.makeText(getApplicationContext(), getString(R.string.modo_off_line), Toast.LENGTH_SHORT).show();
            }
        }
    }

    public Bitmap fixOrientation(Bitmap mBitmap) {
        if (mBitmap.getWidth() > mBitmap.getHeight()) {
            Matrix matrix = new Matrix();
            matrix.postRotate(90);
            return mBitmap = Bitmap.createBitmap(mBitmap, 0, 0, mBitmap.getWidth(), mBitmap.getHeight(), matrix, true);
        }
        return mBitmap;
    }


    private class ROTINA_CONSULTAR_TERMOFM extends Workflow<UsuarioEnvolvidoWap, Void, Resposta> {

        public ROTINA_CONSULTAR_TERMOFM(Context ctx) {
            super(ctx, true);
        }

        @Override
        protected Resposta doInBackground(UsuarioEnvolvidoWap... params) {
            try {
                UsuarioEnvolvidoWap wap = params[0];
                Usuario usuario = uew.oa.u;
                Resposta resposta = EcopsService.getInstance(getBaseContext()).consultarEnvolvidoTipoTermoFm(usuario);
                return resposta;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

        @Override
        protected void onPostExecute(Resposta result) {
            if (isNotNull(result) && result.contemDados()) {
                _dialogEnvolvidoTermoFm(result.list);
            } else if (result.contemMsgErro()) {
                Toast.makeText(AtendimentoEnvolvido.this, result.getMsg(), Toast.LENGTH_SHORT).show();
            }
            super.onPostExecute(result);
        }

    }

//    private class ROTINA_CONSULTAR_CARGO extends Workflow

    private class ROTINA_ENVIAR_TERMOFM extends Workflow<UsuarioEnvolvidoWap, Void, Boolean> {

        public ROTINA_ENVIAR_TERMOFM(Context ctx) {
            super(ctx, true);
        }

        @Override
        protected Boolean doInBackground(UsuarioEnvolvidoWap... params) {
            try {
                UsuarioEnvolvidoWap wap = params[0];
                Usuario usuario = uew.oa.u;
                long idTipoTermoFm = uew.idTipoTermoFm;
                boolean isSaveOk = EcopsService.getInstance(getBaseContext()).inserirTipoTermoFm(usuario, idTipoTermoFm, wap.e);
                return isSaveOk;
            } catch (Exception e) {
                e.printStackTrace();
            }
            return null;
        }

        @Override
        protected void onPostExecute(Boolean result) {
            if (result != null && result) {
                new ROTINA_IMPRESSAO(AtendimentoEnvolvido.this, AtendimentoEnvolvido.this).execute();


            } else {
                Toast.makeText(AtendimentoEnvolvido.this, getString(R.string.modo_off_line), Toast.LENGTH_SHORT).show();
            }
            super.onPostExecute(result);
        }

    }

    protected void _dialogConnectedWifiPrinter(List<ConfigPrinter> list) {

    }


    public void _createFile(byte[] primeiroItem, String nome, String extensao) {

        this.fileToSaveResult = primeiroItem;
        createFile(nome + "." + extensao);

    }

    private void createFile(String filename) {
        Intent intent = new Intent(Intent.ACTION_CREATE_DOCUMENT);
        intent.addCategory(Intent.CATEGORY_OPENABLE);
        intent.setType("application/pdf");
        intent.putExtra(Intent.EXTRA_TITLE, filename);

        startActivityForResult(intent, CREATE_FILE);
    }

    public void _dialogWaitCloseDataNetwork(final Workflow workflow, String urlPath) {
        if (Parametros.getInstance(this).isFL_EXIBE_FM_MOBILE()) {

            ROTINA_BOLETIM.readFromExternalStorage(this, urlPath);


        } else {
            final Dialog dialog = new Dialog(this, R.style.ThemeDialogUser);
            final BroadcastReceiver broadcastReceiverMOBILE = broadcastReceiverWaitConnectedMobile(this, urlPath, dialog);
            final IntentFilter intentFilter = new IntentFilter();
            intentFilter.addAction("android.net.conn.CONNECTIVITY_CHANGE");
            registerReceiver(broadcastReceiverMOBILE, intentFilter);


            dialog.setContentView(R.layout.tela_popup_wait_close_network);
            dialog.setTitle("Impressão de documento");
            dialog.setCancelable(false);

            Button buttonCancelPrinter = (Button) dialog.findViewById(R.id.telaPopUpAtendimentoTipoTermoFmSalvar);
            buttonCancelPrinter.setEnabled(true);
            buttonCancelPrinter.setOnClickListener(new OnClickListener() {
                @Override
                public void onClick(View v) {
                    try {
                        unregisterReceiver(broadcastReceiverMOBILE);
                        workflow.cancel(true);
                    } catch (Exception e) {
                    }
                    dialog.dismiss();
                }
            });


            dialog.show();
        }
    }

    public BroadcastReceiver broadcastReceiverWaitConnectedMobile(final Context ctx, final String pathFile, final Dialog dialog) {
        BroadcastReceiver broadcastReceiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                ConnectivityManager connMgr = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);

                NetworkInfo mobile = connMgr.getNetworkInfo(ConnectivityManager.TYPE_MOBILE);
                LogEcops.debug(" mobile status " + mobile.isConnectedOrConnecting());
                if (mobile != null && !mobile.isConnectedOrConnecting()) {
                    _imprimirDocumento(pathFile);
                    context.unregisterReceiver(this);
                    dialog.dismiss();
                }


            }
        };
        return broadcastReceiver;
    }

    void _imprimirDocumento(String urlPath) {
        LogEcops.debug("_imprimirDocumento: " + urlPath);
        ConnectPrinter.getInstance().connectWifiPrinter(AtendimentoEnvolvido.this);
        BroadcastReceiver broadcastReceiver = ConnectPrinter.getInstance().broadcastReceiverPrinterFilePdf(AtendimentoEnvolvido.this, urlPath);
        IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(WifiManager.NETWORK_STATE_CHANGED_ACTION);
        registerReceiver(broadcastReceiver, intentFilter);
    }

    void _finalizarAtendimento() {
        iTrabalho.setFinalEnvolvidoOcorrencia();
        Intent it = new Intent();
        it.putExtra("ocoarrenciaAtendimento", uew.oa.ocorrencia);
        setResult(-4, it);
        AtendimentoEnvolvido.this.finish();
    }

    private class ROTINA_PARAMETRO_ENCAMINHAMENTO extends Workflow<Void, String, String> {
        private final Button btn;

        public ROTINA_PARAMETRO_ENCAMINHAMENTO(Context ctx, Button btn) {
            super(ctx);
            this.btn = btn;
        }

        @Override
        protected String doInBackground(Void... voids) {

            String pFL_ALTERA_ENCAMINHAMENTO_MOBILE = EcopsService.getInstance(context).parametro("FL_ALTERA_ENCAMINHAMENTO_MOBILE");
            return pFL_ALTERA_ENCAMINHAMENTO_MOBILE;
        }

        @Override
        protected void onPostExecute(String s) {
            super.onPostExecute(s);
            if ("S".equals(s)) {
                this.btn.setVisibility(View.VISIBLE);
            }
        }
    }


}

package csi.android.ecops.service;

import android.content.Context;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.util.Base64;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.JsonPrimitive;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;

import org.apache.http.HttpStatus;
import org.apache.http.entity.ByteArrayEntity;
import org.apache.http.entity.StringEntity;
import org.json.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.lang.reflect.Type;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLConnection;
import java.net.URLEncoder;
import java.sql.Timestamp;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import csi.android.ecops.BuildConfig;
import csi.android.ecops.Config;
import csi.android.ecops.EcopsException;
import csi.android.ecops.LogEcops;
import csi.android.ecops.R;
import csi.android.ecops.Tools;
import csi.android.ecops.TrabalhoRecurso;
import csi.android.ecops.dominio.Acao;
import csi.android.ecops.dominio.AcaoSolicitadaWrapper;
import csi.android.ecops.dominio.ChamadoViaturaPk;
import csi.android.ecops.dominio.Cid;
import csi.android.ecops.dominio.ConsultaDespachoRecurso;
import csi.android.ecops.dominio.DespachoAndamentoPKEnvolvidoWrapper;
import csi.android.ecops.dominio.AtendimentoFaseEmpenho;
import csi.android.ecops.dominio.AtendimentoLog;
import csi.android.ecops.dominio.BoletimRequest;
import csi.android.ecops.dominio.ConfigPrinter;
import csi.android.ecops.dominio.ConnectivityInfo;
import csi.android.ecops.dominio.DespachoAndamentoPK;
import csi.android.ecops.dominio.EncaminhamentoRequest;
import csi.android.ecops.dominio.EnvolvidoDocumento;
import csi.android.ecops.dominio.EnvolvidoSamu;
import csi.android.ecops.dominio.EnvolvidoTipoDocumento;
import csi.android.ecops.dominio.EnvolvidoTipoTermoFm;
import csi.android.ecops.dominio.EnvolvidoTransferencia;
import csi.android.ecops.dominio.Estabelecimento;
import csi.android.ecops.dominio.Funcionario;
import csi.android.ecops.dominio.HipoteseDiagnostica;
import csi.android.ecops.dominio.Hospital;
import csi.android.ecops.dominio.ListagemEnvolvidoForm;
import csi.android.ecops.dominio.LoginRequest;
import csi.android.ecops.dominio.LoginViatura;
import csi.android.ecops.dominio.Material;
import csi.android.ecops.dominio.Membro;
import csi.android.ecops.dominio.Mensagem;
import csi.android.ecops.dominio.Ocorrencia;
import csi.android.ecops.dominio.OcorrenciaAtendimento;
import csi.android.ecops.dominio.OcorrenciaObservacao;
import csi.android.ecops.dominio.Parametro;
import csi.android.ecops.dominio.PerguntaEscalaCincinnati;
import csi.android.ecops.dominio.PerguntaEscalaGlasgow;
import csi.android.ecops.dominio.RastreadorBrasilTrack;
import csi.android.ecops.dominio.RespostaEscalaCincinnati;
import csi.android.ecops.dominio.SinaisVitais;
import csi.android.ecops.dominio.SituacaoAtencao;
import csi.android.ecops.dominio.SituacaoAtendimento;
import csi.android.ecops.dominio.TipoDestinoEnvolvido;
import csi.android.ecops.dominio.Usuario;
import csi.android.ecops.dominio.UsuarioOcorrenciaWrapper;
import csi.android.ecops.dominio.Viatura;
import csi.android.ecops.excepetions.InfoException;
import csi.android.ecops.excepetions.RequestException;
import csi.android.ecops.tools.ConvertJsonForObject;
import csi.android.ecops.tools.RequestApi;
import csi.android.ecops.tools.Resposta;
import csi.android.ecops.view.AtendimentoDados;

public class EcopsService extends Service implements IEcopsService {

	private static EcopsService instance;
	private static EcopsServiceOffLine instanceOffLine;

	private static boolean useSatelite;
	private String SERVER_URL ;
	private Context context;
	private String version = BuildConfig.VERSION_NAME;

	public static void setUseSatelite(boolean value) {
		useSatelite = value;
	}

    public boolean hasContext(){
        return this.context != null;
    }

	public Context getApplicationContext(){
    	return this.context;
	}

	@Override
	public boolean parametroBA() {
		try {
			String url = SERVER_URL + "parametros/FL_EXIBE_BA_MOBILE/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			return "S".equals(resp);
		} catch(EcopsException e){
			e.printStackTrace();
		} catch(Exception e){
			e.printStackTrace();
		}
		return false;
	}

	@Override
	public String parametroCargoMedico(){
		try {
			String url = SERVER_URL + "parametros/CD_CARGO_MEDICO/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			return resp;
		} catch(EcopsException e){
			e.printStackTrace();
		} catch(Exception e){
			e.printStackTrace();
		}
		return null;
	}


	@Override
	public String parametroCargoTecEnfe(){
		try {
			String url = SERVER_URL + "parametros/CD_CARGO_TEC_ENFERMAGEM/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			return resp;
		} catch(EcopsException e){
			e.printStackTrace();
		} catch(Exception e){
			e.printStackTrace();
		}
		return null;
	}



	@Override
	public String parametroCargoEnfermeiro(){
		try {
			String url = SERVER_URL + "parametros/CD_CARGO_ENFERMEIRO/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			return resp;
		} catch(EcopsException e){
			e.printStackTrace();
		} catch(Exception e){
			e.printStackTrace();
		}
		return null;
	}



	@Override
	public boolean parametroExibeBotaoLiberar() {
		try {
			String url = SERVER_URL + "parametros/FL_EXIBE_BOTAO_LIBERAR/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			return "S".equals(resp);
		} catch(EcopsException e){
			e.printStackTrace();
		} catch(Exception e){
			e.printStackTrace();
		}
		return false;
	}


	@Override
	public boolean parametroBC() {
		try {
			String url = SERVER_URL + "parametros/FL_EXIBE_BC_MOBILE/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			return "S".equals(resp);
		} catch(EcopsException e){
			e.printStackTrace();
		} catch(Exception e){
			e.printStackTrace();
		}
		return false;
	}

	private EcopsService(Context ctx) {
		context = ctx;
		SERVER_URL = Config.SERVER_URL;	
 	}
	/*public static IEcopsService getInstance() {
		return getInstance(null);
	}*/

	public static IEcopsService getInstance(Context ctx) {
		IEcopsService retorno;
		if(wifiOu3G(ctx)) {
            if (instance == null) {
                instance = new EcopsService(ctx);
            }
            if(!instance.hasContext() && ctx != null){
                instance = new EcopsService(ctx);
            }
		    retorno = instance;
		} else {
			if (instanceOffLine == null) {
				instanceOffLine = new EcopsServiceOffLine(ctx, useSatelite);
			}
            if(!instanceOffLine.hasContext() && ctx != null){
                instanceOffLine = new EcopsServiceOffLine(ctx, useSatelite);
            }
			retorno = instanceOffLine;
		}
//        if (instance == null) {
//            instance = new EcopsService(ctx);
//        }
		return retorno;
	}

	public static boolean wifiOu3G(Context context) {
		ConnectivityManager cm = (ConnectivityManager) context.getSystemService(context.CONNECTIVITY_SERVICE);
		NetworkInfo networkInfo = cm.getActiveNetworkInfo();

		if ((networkInfo != null) && (networkInfo.isConnected()))
			return true;
		/*try {
			String url = new URL(Config.SERVER_URL).getHost();
			final InetAddress address;
			address = InetAddress.getByName(url);
			return !address.equals("");
		}catch (UnknownHostException e) {
			e.printStackTrace();
		} catch (MalformedURLException e) {
			e.printStackTrace();
		} catch (RuntimeException e) {
			e.printStackTrace();
		}*/
        return false;
	}

//	public <T> Resposta<T> validarUsuario(Usuario u) {
//		try {
//			LogEcops.debug(u.toString());
//			String url = SERVER_URL + "usuario/doLogin" + "/" + u.getUser()
//					+ "/" + u.getPass();
//			LogEcops.debug(url);
//			String resp = RequestApi.getInstance().requisitarApiGET(url);
//
//			Usuario usuario = (Usuario) ConvertJsonForObject.getInstance().convert(resp, Usuario.class);
//			if ( usuario != null) {
//				usuario.setUser(u.getUser());
//				usuario.setPass(u.getPass());
//				return new Resposta(usuario);
//			} else {
//				return new Resposta<T>(null,context.getString(R.string.invalid_username_or_password)) ;
//			}
//		} catch (IllegalAccessError  e) {
//			e.printStackTrace();
//			return new Resposta<T>(null, e.getMessage());
//
//		} catch(Exception e){
//			e.printStackTrace();
//			return new Resposta<T>(null, e.getMessage());
//		}
//	}
    @Override
    public Resposta<LoginViatura> validarUsuarioAzure(String token) {
        try {
            final String imei = Tools.getIdDevice(getApplicationContext());
            LogEcops.debug(token);
            String url = SERVER_URL + "token/generatetokenAzure/";
            LogEcops.debug(url);
            LoginRequest lr = new LoginRequest();
            lr.setToken(token);
            lr.setVersao(version);
            lr.setUserimei(imei);
            Gson gson = new Gson();
            String gsonString = gson.toJson(lr);
            LogEcops.debug("gsonString: "+gsonString);
            StringEntity stringEntity = new StringEntity(gsonString, "UTF-8");
            String resp = null;
            try {
                resp = RequestApi.getInstance(context).requisitarPostJson2(url, stringEntity);
            }catch (RequestException e) {
                return new Resposta<LoginViatura>(null, e.getMessage()) ;
            }
            if (resp != null && !Tools.isNumeroRegexp(resp)){
                LoginViatura obj = (LoginViatura)ConvertJsonForObject.getInstance().<LoginViatura>convert(resp, LoginViatura.class);
                if ( obj != null) {
                    Timestamp dataDeHoje = new Timestamp(System.currentTimeMillis());
                    long ts = dataDeHoje.getTime();
                    LogEcops.debug("validarUsuarioComViatura: dataDeHoje.getTime() "+dataDeHoje.getTime());
                    obj.usuario.setDtCriacao(ts);
                    for ( Viatura v : obj.listaViaturas) {
                        v.setCdUsuario(obj.usuario.getCdUsuario());
                    }
                    return new Resposta(obj);

                } else {
                    return new Resposta<LoginViatura>(null, context.getString(R.string.invalid_username_or_password)) ;
                }
            } else {
                if ( resp.equals(String.valueOf(HttpStatus.SC_NO_CONTENT))){
                    return new Resposta<LoginViatura>(null, "Usuário ou senha inválidos.") ;
                }
                return new Resposta<LoginViatura>(null, resp) ;
            }
        }catch (IllegalAccessError  e) {
            e.printStackTrace();
            return new Resposta<LoginViatura>(null, e.getMessage());
        }  catch(Exception e){
            e.printStackTrace();
            return new Resposta<LoginViatura>(null, e.getMessage());
        }
    }

	@Override
	public <T> Resposta<T> validarUsuarioComViatura(Usuario u) {

		try {
			final String imei = Tools.getIdDevice(getApplicationContext());
			LogEcops.debug(u.toString());
			String url = SERVER_URL + "token/generatetoken/";
			LogEcops.debug(url);
			LoginRequest lr = new LoginRequest();
			lr.setUsername(u.getUser());
			lr.setUserpass(u.getPass());
			lr.setVersao(version);
			lr.setUserimei(imei);
			Gson gson = new Gson();
			String gsonString = gson.toJson(lr);
			LogEcops.debug("gsonString: "+gsonString);
			StringEntity stringEntity = new StringEntity(gsonString, "UTF-8");
			String resp = null;
			try {
				resp = RequestApi.getInstance(context).requisitarPostJson2(url, stringEntity);
			}catch (RequestException e) {
				return new Resposta<T>(null, e.getMessage()) ;
			}
			if (resp != null && !Tools.isNumeroRegexp(resp)){
                    LoginViatura obj = (LoginViatura)ConvertJsonForObject.getInstance().<LoginViatura>convert(resp, LoginViatura.class);
					if ( obj != null) {
						Timestamp dataDeHoje = new Timestamp(System.currentTimeMillis());
						long ts = dataDeHoje.getTime();
						LogEcops.debug("validarUsuarioComViatura: dataDeHoje.getTime() "+dataDeHoje.getTime());
						obj.usuario.setUser(u.getUser());
						obj.usuario.setPass(u.getPassDecript());
						obj.usuario.setDtCriacao(ts);
						for ( Viatura v : obj.listaViaturas) {
							v.setCdUsuario(obj.usuario.getCdUsuario());
						}
						return new Resposta(obj);

					} else {
						return new Resposta<T>(null, context.getString(R.string.invalid_username_or_password)) ;
					}
			} else {
				if ( resp.equals(String.valueOf(HttpStatus.SC_NO_CONTENT))){
					return new Resposta<T>(null, "Usuário ou senha inválidos.") ;
				}
				return new Resposta<T>(null, resp) ;
			}
		}catch (IllegalAccessError  e) {
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}  catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}
	}

	@Override
	public synchronized <T> Resposta<T> consultarViaturas(Usuario u) { // cdUnidPolicial
		try {
			String url = SERVER_URL + "viaturaService/listarTodasViaturasPorUsuario/"
					+ u.getUser() + "/" + u.getPass() + "/";
					
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			List<Viatura> lista = ConvertJsonForObject.getInstance().convertToList(resp, Viatura[].class);
			return new Resposta<T>(lista);
		} catch(EcopsException e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		} catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}

	}

	@Override
	public synchronized <T> Resposta<T> consultarTodasViaturas(Usuario u) { // cdUnidPolicial
		try {
			String url = SERVER_URL + "viaturaService/listarTodasViaturas/"
					+ u.getUser() + "/" + u.getPass() + "/"
					+ u.getCdUnidPolicial() + "/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			List<Viatura> lista = ConvertJsonForObject.getInstance().convertToList(resp, Viatura[].class);
			return new Resposta<T>(lista);
		} catch(EcopsException e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		} catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}

	}

	@Override
	public synchronized <T> Resposta<T> gerarOcorrenciaAtendimento(
			Ocorrencia o) {
		OcorrenciaAtendimento oa = new OcorrenciaAtendimento(o, new Date());
		return new Resposta(oa);
	}

	@Override
	public synchronized <T> Resposta<T> consultarOcorrencias(Usuario u, Viatura r) {
		try {
			String url = SERVER_URL
					+ "despachoAndamento/consultaDespachosViatura/"
					+ u.getUser() + "/" + u.getPass() + "/" + r.getCdViatura() + "/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			
			LogEcops.debug("resposta: "+resp);
			if ( resp != null){
				List<Ocorrencia> lista = ConvertJsonForObject.getInstance().convertToList(resp, Ocorrencia[].class);
				if (lista != null) {
					return new Resposta<T>(lista);
				} else {
					return new Resposta(null,context.getString(R.string.ERRO_SERVIDOR_DESCONECTADO));
				}
			} else {
				return new Resposta(null,"OK");
			}
			
		} catch(EcopsException e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		} catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}


	}

	@Override
	public synchronized <T> Resposta<T> consultarOcorrenciasComStatus(Usuario u, Viatura r) {
		try {
			String url = SERVER_URL
					+ "despachoAndamento/consultaDespachosViaturaStatus/"
					+ u.getUser() + "/" + u.getPass() + "/" + r.getCdViatura() + "/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			
			LogEcops.debug("resposta: "+resp);
			if ( resp != null ){
				List<Ocorrencia> lista = ConvertJsonForObject.getInstance().convertToList(resp, Ocorrencia[].class);
				LogEcops.debug("respostaConvert: "+lista);
				if (lista != null) {
					return new Resposta<T>(lista);
				} else {
					return new Resposta(null,context.getString(R.string.ERRO_SERVIDOR_DESCONECTADO));
				}
			} else {
				return new Resposta(null,"OK");
			}
			
		} catch(EcopsException e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		} catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}

	}

	@Override
	public synchronized <T> Resposta<T> consultarOcorrenciaSimplificado(Usuario u, Viatura r) {
		try {
			String url = SERVER_URL
					+ "ocorrencia/consultaOcorrenciaEnvolvido/"
					+ u.getUser() + "/" + u.getPass() + "/" + r.getCdViatura() + "/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			
			LogEcops.debug("resposta: "+resp);
			if ( resp != null){
				List<Ocorrencia> lista = ConvertJsonForObject.getInstance().convertToList(resp, Ocorrencia[].class);
				if (lista != null) {
					return new Resposta<T>(lista);
				} else {
					return new Resposta(null,context.getString(R.string.ERRO_SERVIDOR_DESCONECTADO));
				}
			} else {
				return new Resposta(null,"OK");
			}
			
		} catch(EcopsException e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		} catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}

	}

	@Override
	public synchronized <T> Resposta<T> consultarObservacaoNrNovoChamadoComPeriodo(Usuario u, List<Ocorrencia> list) {
		try {
			
			String indices = Tools.retornaChavesSeparadoPorTag("-",list);
			Long ultimaConsulta = null ;
			Date time	 = TrabalhoRecurso.getInstance().ultimaConsultaObservacao;
			LogEcops.debug("time: "+time);
			if (time != null) {			
				ultimaConsulta = time.getTime();
			} else {
				time = new Date();
				ultimaConsulta = time.getTime() - (1000 * 60 * 60 * 24);
			}
			String url = SERVER_URL
					+ "observacao/listarObservacoesPorNrNovoChamadoComUltimaConsulta/"
					+ u.getUser() + "/" + u.getPass() +"/"+indices+"/"+ultimaConsulta + "/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			List<OcorrenciaObservacao> lista = ConvertJsonForObject.getInstance().convertToList(resp, OcorrenciaObservacao[].class);
			if (lista != null) {
				return new Resposta<T>(lista);
			} else {
				return new Resposta(null,context.getString(R.string.ERRO_SERVIDOR_DESCONECTADO));
			}
		} catch(EcopsException e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		} catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}

	}

//	public synchronized <T> Resposta<T> consultarObservacaoNrNovoChamado(Usuario u, List<Ocorrencia> list) {
//		try {
//
//			String indices = Tools.retornaChavesSeparadoPorTag("-",list);
//
//			String url = SERVER_URL
//					+ "observacao/listarObservacoesPorNrNovoChamado/"
//					+ u.getUser() + "/" + u.getPass() +"/"+indices + "/" ;
//			LogEcops.debug(url);
//			String resp = RequestApi.getInstance().requisitarApiGET(url);
//
//			if (resp != null && !Tools.isNumeroRegexp(resp)) {
//				List<OcorrenciaObservacao> lista = ConvertJsonForObject.getInstance().convertToList(resp, OcorrenciaObservacao[].class);
//				if (lista != null) {
//					return new Resposta<T>(lista);
//				} else {
//					return new Resposta(null,context.getString(R.string.ERRO_SERVIDOR_DESCONECTADO));
//				}
//			} else {
//				return new Resposta<T>(null,"Servidor retornou "+resp) ;
//			}
//		} catch(EcopsException e){
//			e.printStackTrace();
//			return new Resposta<T>(null, e.getMessage());
//		} catch(Exception e){
//			e.printStackTrace();
//			return new Resposta<T>(null, e.getMessage());
//		}
//
//	}

	@Override
	public synchronized <T> Resposta<T> consultarObservacaoNrNovoChamado(Usuario u, String indice) {
		try {
			String url = SERVER_URL
					+ "observacao/listarObservacoesPorNrNovoChamado/"
					+ u.getUser() + "/" + u.getPass() + "/" + indice + "/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			 
			if (resp != null && !Tools.isNumeroRegexp(resp)) {
				List<OcorrenciaObservacao> lista = ConvertJsonForObject.getInstance().convertToList(resp, OcorrenciaObservacao[].class);
				if (lista != null) {
					return new Resposta<T>(lista);
				} else {
					return new Resposta(null,context.getString(R.string.ERRO_SERVIDOR_DESCONECTADO));
				}
			} else {
				return new Resposta<T>(null,"Servidor retornou "+resp) ;
			}
		} catch(EcopsException e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		} catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}

	}

	@Override
	public synchronized <T> Resposta<T> consultarProximasObservacaoApartirIdObservacao(Usuario u, Ocorrencia o , String idObservacao) {
		try {
			
			 
			String url = SERVER_URL
					+ "observacao/listarObservacoesApartirIdObservacao/"
					+ u.getUser() + "/" + u.getPass() +"/"+o.getNrChamadoNovo()+"/"+idObservacao + "/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			
			if (resp != null && !Tools.isNumeroRegexp(resp)) {
				List<OcorrenciaObservacao> lista = ConvertJsonForObject.getInstance().convertToList(resp, OcorrenciaObservacao[].class);
				if (lista != null) {
					return new Resposta<T>(lista);
				} else {
					return new Resposta(null,context.getString(R.string.ERRO_SERVIDOR_DESCONECTADO));
				}
			} else {
				return new Resposta<T>(null,"Servidor retornou "+resp) ;
			}
		} catch(EcopsException e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		} catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}

	}

	@Override
	public synchronized <T> Resposta<T> consultarAtendimentoEnvolvido(Usuario u , Ocorrencia o) {
		try {
			String url = SERVER_URL + "envolvido/retornaEnvolvidos/" + u.getUser() + "/" + u.getPass() + "/" + o.getDespachoAndamentoPK().getNrDespacho() + "/";
			LogEcops.debug("consultarAtendimentoEnvolvido");
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			LogEcops.debug(resp);
			List<EnvolvidoTransferencia> lista = ConvertJsonForObject.getInstance().convertToList(resp, EnvolvidoTransferencia[].class);
			if (lista != null) {
				return new Resposta<T>(lista);
			} else {
				return new Resposta(null,context.getString(R.string.ERRO_SERVIDOR_DESCONECTADO));
			}
		}  catch(EcopsException e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		} catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}
	}

	@Override
	public synchronized <T> Resposta<T> consultarEnvolvidoSamu(Usuario u , EnvolvidoTransferencia env){
		try {
			String url = SERVER_URL + "envolvidoSamu/retornaEnvolvidoSamu/" + u.getUser() + "/" + u.getPass() + "/" + env.getIdEnvolvidoDesp() + "/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			LogEcops.debug(resp);
			EnvolvidoSamu envolvidosamu = (EnvolvidoSamu) ConvertJsonForObject.getInstance().convert(resp, EnvolvidoSamu.class);
			return new Resposta<T>((T)envolvidosamu);
			
		}  catch(EcopsException e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}  catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}
	}

	@Override
	public synchronized <T> Resposta<T> novoEnvolvido(Usuario u ,  EnvolvidoTransferencia es, Ocorrencia o){
		try {
            DespachoAndamentoPKEnvolvidoWrapper despachoAndamentoPKEnvolvidoWrapper = new DespachoAndamentoPKEnvolvidoWrapper();
            despachoAndamentoPKEnvolvidoWrapper.setDespachoAndamentoPK(o.getDespachoAndamentoPK());
            despachoAndamentoPKEnvolvidoWrapper.setEnvolvido(es);
			String url = SERVER_URL + "envolvido/salvarEnvolvidoDespacho/" + u.getUser() + "/" + u.getPass() + "/";
			Gson gson = new Gson();
			String gsonString = gson.toJson(despachoAndamentoPKEnvolvidoWrapper);
			StringEntity stringEntity = new StringEntity(gsonString, "UTF-8");
			String envTransSerializado = RequestApi.getInstance(context).requisitarPostJson(url, stringEntity, u.getRegistroFuncional());
			if (envTransSerializado != null) {
				if("ENVOLVIDO JÁ EXISTENTE COM ESSE NOME".equals(envTransSerializado)) {
					return new Resposta(null, context.getString(R.string.MSG_ENVOLVIDO_EXISTS));
				}
				Object envolvidoTransferencia = ConvertJsonForObject.getInstance().convert(envTransSerializado, EnvolvidoTransferencia.class);
				return new Resposta<T>((T)envolvidoTransferencia);
			} else {
				return new Resposta(null,context.getString(R.string.ERRO_SERVIDOR_DESCONECTADO));
			}
		}  catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}
	}

	@Override
	public synchronized <T> Resposta<T> retornaEnvolvidoSamuIdEnvolvidoSamu(Usuario u, long idEnvolvido){
		try {
			String url = SERVER_URL + "envolvidoSamu/retornaEnvolvidoSamuIdEnvolvidoSamu/" + u.getUser() + "/" + u.getPass() + "/" + idEnvolvido + "/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			LogEcops.debug(resp);
			EnvolvidoSamu envolvidosamu = (EnvolvidoSamu) ConvertJsonForObject.getInstance().convert(resp, EnvolvidoSamu.class);
			return new Resposta<T>((T)envolvidosamu);

		}  catch(EcopsException e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}  catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}
	}

	@Override
	public synchronized <T> Resposta<T> consultarEnvolvidoSamuHospitalDestino(Usuario u , EnvolvidoSamu es){
		try {
			String url = SERVER_URL + "hospital/retornaHospital/" + u.getUser() + "/" + u.getPass() + "/" + es.getIdHospitalDestino() + "/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			LogEcops.debug(resp);
			Hospital hospital = (Hospital) ConvertJsonForObject.getInstance().convert(resp, Hospital.class);
			return new Resposta<T>((T)hospital);
		}  catch(EcopsException e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}  catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}
	}

	@Override
	public synchronized boolean gravarOcorrenciaDadosGerais(Usuario u ,EnvolvidoTransferencia e){
		try {
			String url = SERVER_URL + "envolvido/alteraNomeSexoIdadeDoEnvolvido/" + u.getUser() + "/" + u.getPass() + "/";
			LogEcops.debug(url);

			Gson gson = new Gson();
			String gsonString = gson.toJson(e);
			LogEcops.debug("gsonString: "+gsonString);
			StringEntity stringEntity = new StringEntity(gsonString, "UTF-8");
			
			String resp = RequestApi.getInstance(context).requisitarPostJson(url,stringEntity, u.getRegistroFuncional());
			if ( resp != null)
				return true;
			else 
				return false ;
		} catch (Exception ex) {
			ex.printStackTrace();
			return false;
		}
	}

	@Override
	public synchronized Integer gravarOcorrenciaObservacao(Usuario u ,OcorrenciaObservacao oo){
		try {
			String cdViatura = null;
			if(TrabalhoRecurso.getInstance().getRecurso() != null) {
				cdViatura = TrabalhoRecurso.getInstance().getRecurso().getCdViatura();
			}

			String url = SERVER_URL + "observacao/insereObservacao/" + u.getUser() + "/" + u.getPass()  +"/" + cdViatura  +"/";
			LogEcops.debug(url);
			
			Gson gson = new GsonBuilder().setDateFormat(Tools.DATE_FORMAT_TO_GSON).create();
			String gsonString = gson.toJson(oo);
			LogEcops.debug(gsonString);
			StringEntity stringEntity = new StringEntity(gsonString, "UTF-8");
			
			String resp = RequestApi.getInstance(context).requisitarPostJson(url,stringEntity, u.getRegistroFuncional());
			resp = resp.replace("\n","");
			if ( resp != null ) {
				Integer retorno = (Integer) ConvertJsonForObject.getInstance().convert(resp, Integer.class);
				return retorno;
			} 
		
		} catch (Exception ex) {
			ex.printStackTrace();
			return 0;
		}
		return 0;
	}

	@Override
	public synchronized boolean gravarOcorrenciaSinaisVitais(Usuario u ,SinaisVitais es){
		try { 
			String url = SERVER_URL + "envolvidoSamuSinaisVitais/insereEnvolvidoSamuEvolucaoSinaisVitais/" + u.getUser() + "/" + u.getPass() + "/";
			LogEcops.debug(url);
			
			Gson gson = new Gson();
			String gsonString = gson.toJson(es);
			LogEcops.debug(gsonString);
			StringEntity stringEntity = new StringEntity(gsonString, "UTF-8");
			
			String resp = RequestApi.getInstance(context).requisitarPostJson(url,stringEntity, u.getRegistroFuncional());
			if ( resp != null)
				return true;
			else 
				return false ;
		} catch (Exception ex) {
			ex.printStackTrace();
			return false;
		}
	}

	@Override
	public synchronized boolean gravarOcorrenciaSinaisSintomasLessoes(Usuario u ,OcorrenciaObservacao oo){
		try {
			String cdViatura = null;
			if(TrabalhoRecurso.getInstance().getRecurso() != null) {
				cdViatura = TrabalhoRecurso.getInstance().getRecurso().getCdViatura();
			}
			String url = SERVER_URL + "observacao/insereObservacao/" + u.getUser() + "/" + u.getPass() + "/" + cdViatura + "/";
			LogEcops.debug(url);
			
			Gson gson = new Gson();
			String gsonString = gson.toJson(oo);
			LogEcops.debug(gsonString);
			StringEntity stringEntity = new StringEntity(gsonString, "UTF-8");
			String resp = RequestApi.getInstance(context).requisitarPostJson(url,stringEntity,u.getRegistroFuncional());
			if ( resp != null)
				return true;
			else 
				return false ;
		} catch (Exception ex) {
			ex.printStackTrace();
			return false;
		}
	}

	@Override
	public synchronized <T> Resposta<T> consultarHistoricoObservacao(Usuario u , EnvolvidoSamu es){
		try {
			String url = SERVER_URL + "observacao/listarObservacoesPorEnvolvidoSamu/" 
						+ u.getUser() + "/" + u.getPass() + "/"+ es.getIdEnvolvidoSamu()+ "/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			LogEcops.debug(resp);
			List<OcorrenciaObservacao> lista = ConvertJsonForObject.getInstance().convertToList(resp, OcorrenciaObservacao[].class);
			if (lista != null) {
				return new Resposta<T>(lista);
			} else {
				return new Resposta(null,context.getString(R.string.ERRO_SERVIDOR_DESCONECTADO));
			}
		  
	 
		}catch(EcopsException e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}  catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}
	}

	@Override
	public synchronized <T> Resposta<T> consultarHistoricoSinaisVitais(Usuario u , EnvolvidoSamu es, boolean isNotification){
		try {
			String url = SERVER_URL + "envolvidoSamuSinaisVitais/consultarEnvolvidoSamuSinaisVitais" +
					(isNotification ? "Notify" : "") + "/"
						+ u.getUser() + "/" + u.getPass() + "/"+ es.getIdEnvolvidoSamu() + "/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			LogEcops.debug(resp);
			List<SinaisVitais> lista = ConvertJsonForObject.getInstance().convertToList(resp, SinaisVitais[].class);
					 
			if (lista != null) {
				return new Resposta<T>(lista);
			} else {
				return new Resposta(null,context.getString(R.string.ERRO_SERVIDOR_DESCONECTADO));
			}
		  
	 
		}  catch(EcopsException e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}  catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}
	}

	@Override
	public synchronized <T> Resposta<T> consultarPerguntasEscalaCincinnati(Usuario u){
		try {
			String url = SERVER_URL + "envolvidoSamuSinaisVitais/consultarPerguntasEscalaCincinnati/"
					+ u.getUser() + "/" + u.getPass() + "/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			LogEcops.debug(resp);
			List<PerguntaEscalaCincinnati> lista = ConvertJsonForObject.getInstance().convertToList(resp, PerguntaEscalaCincinnati[].class);

			if (lista != null) {
				return new Resposta<T>(lista);
			} else {
				return new Resposta(null,context.getString(R.string.ERRO_SERVIDOR_DESCONECTADO));
			}


		}  catch(EcopsException e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}  catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}
	}

	@Override
	public synchronized <T> Resposta<T> consultarPerguntasEscalaGlasgow(Usuario u){
		try {
			String url = SERVER_URL + "envolvidoSamuSinaisVitais/consultarPerguntasEscalaGlasgow/"
					+ u.getUser() + "/" + u.getPass() + "/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			LogEcops.debug(resp);
			List<PerguntaEscalaGlasgow> lista = ConvertJsonForObject.getInstance().convertToList(resp, PerguntaEscalaGlasgow[].class);

			if (lista != null) {
				return new Resposta<T>(lista);
			} else {
				return new Resposta(null,context.getString(R.string.ERRO_SERVIDOR_DESCONECTADO));
			}

		}  catch(EcopsException e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}  catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}
	}

	@Override
	public synchronized boolean gravarRespostasEscalaCincinnati(Usuario u,List<RespostaEscalaCincinnati> lista){
		try {
			String url = SERVER_URL + "envolvidoSamuSinaisVitais/gravarPerguntasEscalaCincinnati"
					+ u.getUser() + "/" + u.getPass() + "/";
			LogEcops.debug(url);

			Gson gson = new Gson();
			String gsonString = gson.toJson(lista);
			LogEcops.debug(gsonString);
			StringEntity stringEntity = new StringEntity(gsonString, "UTF-8");
			String resp = RequestApi.getInstance(context).requisitarPostJson(url,stringEntity, u.getUser());

			if ( resp != null)
				return true;
			else
				return false ;

		} catch(Exception e){
			e.printStackTrace();
			return false;
		}
	}

	public static enum EVENTO_OCORRENCIA { SQTH , CQTH , SHOSP , FIMOP , CHOSP , SQTH_INV};

	@Override
	public boolean insertEventoAtendimeto(OcorrenciaAtendimento oa ,EVENTO_OCORRENCIA evt , long kmViatura){
		
		String url = SERVER_URL ;
		switch (evt) {
		case SQTH:
			url+= "despachoAndamento/insereDataHoraSaidaLocal/";
			break;
		case CQTH:
			url+= "despachoAndamento/insereDataHoraChegadaLocal/";
			break;
		case SHOSP:
			url+= "despachoAndamento/insereDataHoraSaidaHospital/";
			break;
		case FIMOP:
			url+= "despachoAndamento/insereDataHoraAtendimentoFinalizado/";
			break;
		case CHOSP:
			url+= "despachoAndamento/insereDataHoraChegadaHospital/";
			break;
		}
		
		
		url+= oa.u.getUser() + "/" + oa.u.getPass() + "/" + oa.ocorrencia.getDespachoAndamentoPK().getNrChamado() +
				"/" + new Date().getTime() +
				"/" + kmViatura +
				"/" + oa.viatura.getCdViatura() + "/";
		try {
			
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			LogEcops.debug(resp);
			if(resp.contains("true")){
				return true;
			} else {
				return false;
			}
		} catch (Exception ex) {
			ex.printStackTrace();
			return false;
		}
		
	}

	@Override
	public synchronized <T> Resposta<T> consultarRastreadorVeiculo(LoginViatura loginViatura ) {
		//http://www.brasiltrack.com/webservice/?keyws=4A835B68-764B-11E4-8024-00133B0E1243&placa=${PLACA}&ws=localizacao&mt=json

		try {
			String url = Config.SERVER_URL_BRASILTRACK
					+ "&placa=" + loginViatura.getListaViaturas().get(0).getIdPlaca() +
					"-" + loginViatura.getListaViaturas().get(0).getNrPlaca()
					+ "&ws=localizacao&mt=json" + "/";

			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);

			if (resp != null && !Tools.isNumeroRegexp(resp)) {
				RastreadorBrasilTrack rb = (RastreadorBrasilTrack) ConvertJsonForObject.getInstance().convert(resp, RastreadorBrasilTrack.class);

				if (rb != null) {
					Resposta r = new Resposta<RastreadorBrasilTrack>(rb);
					return r;
				} else {
					return new Resposta(null, context.getString(R.string.ERRO_SERVIDOR_DESCONECTADO));
				}
			} else {
				return new Resposta<T>(null, "Servidor retornou " + resp);
			}
		} catch (EcopsException e) {
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}
	}

	public static final Gson customGson = new GsonBuilder().registerTypeHierarchyAdapter(byte[].class,new ByteArrayToBase64TypeAdapter()).create();

    // Using Android's base64 libraries. This can be replaced with any base64 library.
    private static class ByteArrayToBase64TypeAdapter implements JsonSerializer<byte[]>, JsonDeserializer<byte[]> {
        public byte[] deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException {
            return Base64.decode(json.getAsString(), Base64.NO_WRAP);
        }
        public JsonElement serialize(byte[] src, Type typeOfSrc, JsonSerializationContext context) {

        	return new JsonPrimitive(new String(Base64.encode(src, Base64.NO_WRAP | Base64.NO_PADDING)));
            //return new JsonPrimitive(Base64.encodeToString(src, Base64.NO_PADDING | Base64.CRLF));
        }
    }

	@Override
	public synchronized  <T> Resposta<T>  sincronizarAtendimentoDocumentos(Usuario u , EnvolvidoDocumento documento){
		try {
			
			//TODO: VERIFICAR COM ENVIAR ARQ EM FORMATO BINARIO NO JSON PARA SER TRANSPARENTE O SERVIÇO 
			
			String url = SERVER_URL + "ocorrencia/atendimentoSincronizarDocumento/" + u.getUser() + "/" + u.getPass() + "/";
			LogEcops.debug(url);
			byte[] bdoc = documento.getImgDocumento();
			documento.setImgDocumento(null);
			Gson gson = new Gson();
			String gsonString = customGson.toJson(documento);
			LogEcops.debug("gsonString: "+gsonString);
			StringEntity stringEntity = new StringEntity(gsonString, "UTF-8");
			
			String resp = RequestApi.getInstance(context).requisitarPostJson(url, stringEntity, null);
			if ( resp != null) {
				url = SERVER_URL + "ocorrencia/envioDocumento/" + resp + "/";
				ByteArrayEntity bao = new ByteArrayEntity(bdoc);
				RequestApi.getInstance(context).getApiHttpPost(url, bao, u.getUser());
				return new Resposta(resp);
			} else {
				return new Resposta(null, context.getString(R.string.ERRO_SERVIDOR_DESCONECTADO));
			}
		} catch (Exception e) {
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}
	}

	@Override
	public synchronized <T> Resposta<T> consultarAtendimentoListaDocumentos(Usuario u , String id_envolvido){
		try {
			String url = SERVER_URL + "ocorrencia/atendimentoDocumentoLista/"
					+ u.getUser() + "/" + u.getPass() +"/"+id_envolvido + "/";
					
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			List<EnvolvidoDocumento> lista = ConvertJsonForObject.getInstance().convertToList(resp, EnvolvidoDocumento[].class);
			return new Resposta<T>(lista);
		}catch(EcopsException e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		} catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}

	}

	@Override
	public synchronized <T> Resposta<T> consultarDocumentosApartirDoUltimoId(Usuario u , String idEnvolvido , long  idDespachoDocumento){
		try {
			String url = SERVER_URL + "ocorrencia/atendimentoUltimoDocumentoLista/"
					+ u.getUser() + "/" + u.getPass() +"/"+idEnvolvido+"/"+idDespachoDocumento+"/";
					
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			List<EnvolvidoDocumento> lista = ConvertJsonForObject.getInstance().convertToList(resp, EnvolvidoDocumento[].class);
			return new Resposta<T>(lista);
		}catch(EcopsException e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		} catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}

	}

	@Override
	public synchronized boolean logOff(Usuario u){

		try {
			final String imei = Tools.getIdDevice(getApplicationContext());
			String url = SERVER_URL + "log/logoff/"
					+ u.getUser() + "/" + u.getPass() + "/" + URLEncoder.encode(version, "UTF-8") + "/"
					+ imei + "/";

			LogEcops.debug(url);

			boolean  resp = Boolean.valueOf(RequestApi.getInstance(context).requisitarApiGET(url, true));

			return resp;

		}catch(EcopsException e){
			e.printStackTrace();
			return false;
		} catch(Exception e){
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public synchronized boolean logOn(String u){
		try {
			final String imei = Tools.getIdDevice(getApplicationContext());
			String url = SERVER_URL + "log/logon/"
					+ u + "/" + null + "/" + URLEncoder.encode(version, "UTF-8") + "/" + imei + "/";
			return Boolean.valueOf(RequestApi.getInstance(context).requisitarApiGET(url, true));
		}catch(EcopsException e){
			e.printStackTrace();
			return false;
		} catch(Exception e){
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public synchronized boolean chegadaAoDispositivo(UsuarioOcorrenciaWrapper uow){
		try {
			String url = SERVER_URL + "log/entregueAoDispositivo/"
					+ uow.getUsuario().getUser() + "/" + uow.getUsuario().getPass() + "/"
					+ uow.getOcorrencia().getNrChamadoNovo() + "/" + URLEncoder.encode(version, "UTF-8") + "/";

			LogEcops.debug(url);

			boolean  resp = Boolean.valueOf(RequestApi.getInstance(context).requisitarApiGET(url, true));

			return resp;

		}catch(EcopsException e){
			e.printStackTrace();
			return false;
		} catch(Exception e){
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public synchronized <T> Resposta<T> consultarAtendimentoDocumento(Usuario u , EnvolvidoDocumento ed){
		try {
			String url = SERVER_URL + "ocorrencia/atendimentoDocumentoImagem/"
					+ u.getUser() + "/" + u.getPass() +"/"+ed.getCdDespachoDocumento() + "/";
					
			LogEcops.debug(url);
			byte []  resp = RequestApi.getInstance(context).getArrayByteApiHttpGet(url);
			if ( resp != null) {
				 
				ed.setImgDocumento(resp);
				return new  Resposta(ed);
			}
		}catch(EcopsException e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		} catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}
		return null ;
	}

	@Override
	public synchronized <T> Resposta<T> consultarAtendimentoTipoDocumento(Usuario u ){
			try{
				String url = SERVER_URL+ "ocorrencia/atendimentoTipoDocumentoLista/"+ u.getUser() + "/" + u.getPass() + "/";
				LogEcops.debug(url);
				String resp = RequestApi.getInstance(context).requisitarApiGET(url);
				LogEcops.debug("resposta: "+resp);
				if ( resp != null){
					List<EnvolvidoTipoDocumento> lista = ConvertJsonForObject.getInstance().convertToList(resp, EnvolvidoTipoDocumento[].class);
					if (lista != null) {
						return new Resposta<T>(lista);
					} else {
						return new Resposta(null,context.getString(R.string.ERRO_SERVIDOR_DESCONECTADO));
					}
				} else {
					return new Resposta(null,"OK");
				}
				
			} catch(EcopsException e){
				e.printStackTrace();
				return new Resposta<T>(null, e.getMessage());
			} catch(Exception e){
				e.printStackTrace();
				return new Resposta<T>(null, e.getMessage());
			}
	}

	private String testeAnotherAPI (URL url, String metodo, Object o) throws IOException {
		return RequestApi.getInstance(context).downloadUrl(url, metodo, o);
	}

	@Override
	public synchronized  String sincronizarFaseAtendimento(Usuario u , AtendimentoFaseEmpenho afe){
	try {
			
			//TODO: VERIFICAR COM ENVIAR ARQ EM FORMATO BINARIO NO JSON PARA SER TRANSPARENTE O SERVIÇO 
			
			String url = SERVER_URL + "despachoAndamento/sincronizarFaseAtendimento/" + u.getUser() + "/" + u.getPass() + "/";
			LogEcops.debug(url);
			Gson gson = new Gson();
			String gsonString = customGson.toJson(afe);
			LogEcops.debug("gsonString: "+gsonString);
			StringEntity stringEntity = new StringEntity(gsonString, "UTF-8");

			String resp = null;
			/*try {
				resp = RequestApi.getInstance().requisitarPostJson2(url, stringEntity);
			}catch (RequestException ex) {
				resp = ex.getMessage();
			}*/
			try {
				resp = testeAnotherAPI(new URL(url), "POST", afe);
				final JSONObject obj = new JSONObject(resp);
				final String status = obj.getString("status");
				if (status.equals("SUCCESS")) {
					resp = obj.getString("data");
				} else {
					throw RequestException.generateException(status, obj.getString("mensagem"));
				}
			}catch (Exception e) {
				resp = e.getMessage();
			}

			LogEcops.debug("consultarAtendimentoFaseAtual "+resp);

			return resp ;

		} catch (Exception e) {
			e.printStackTrace();
			return e.getMessage();
		}
	}

	@Override
	public synchronized  boolean sincronizarAtendimentoFaseEmpenhoLog(Usuario u , AtendimentoLog al ){
		try {
				String url = SERVER_URL + "despachoAndamento/sincronizarAtendimentoLog/" + u.getUser() + "/" + u.getPass() + "/";
				LogEcops.debug(url);
				Gson gson = new Gson();
				String gsonString = customGson.toJson(al);
				LogEcops.debug("gsonString: "+gsonString);
				StringEntity stringEntity = new StringEntity(gsonString, "UTF-8");
				String resp = RequestApi.getInstance(context).requisitarPostJson(url,stringEntity, null);
				LogEcops.debug("sincronizarAtendimentoLog "+resp);
				if ( resp != null)
					return  true;
				else 
					return false ;
			} catch (Exception e) {
				e.printStackTrace();
				return false;
			}
		}

	@Override
	public synchronized  <T> Resposta <T> consultarAtendimentoFaseAtual(Usuario u , AtendimentoFaseEmpenho afe){
	try {
			

			String url = SERVER_URL + "despachoAndamento/consultarAtendimentoFaseAtual/" + u.getUser() + "/" + u.getPass() + "/";
			LogEcops.debug(url);
			Gson gson = new Gson();
			String gsonString = customGson.toJson(afe);
			LogEcops.debug("gsonString: "+gsonString);
			StringEntity stringEntity = new StringEntity(gsonString, "UTF-8");
			String resp = RequestApi.getInstance(context).requisitarPostJson(url, stringEntity, null);
			AtendimentoFaseEmpenho fase = (AtendimentoFaseEmpenho) ConvertJsonForObject.getInstance().convert(resp, AtendimentoFaseEmpenho.class);
			if ( fase != null) {
				return new Resposta(fase);
			} else {
				return null ;
			}
		} catch (Exception e) {
			e.printStackTrace();
			return new Resposta<T>(null,e.getMessage()) ;
		}
	}

	@Override
	public synchronized  boolean inserirStatusTablet(Usuario u , Viatura v , int idStatus){
		try {
				String url = SERVER_URL + "viaturaService/inserirStatusTablet/" + u.getUser() + "/" + u.getPass() + "/"+v.getCdViatura()+"/"+idStatus+"/";
				LogEcops.debug(url);
				String resp = RequestApi.getInstance(context).requisitarPostJson(url, new StringEntity(""), u.getUser());
				LogEcops.debug("consultarAtendimentoFaseAtual "+resp);
				boolean resposta = Boolean.valueOf(resp);
				return resposta;
			} catch (Exception e) {
				e.printStackTrace();
				return false;
			}
	}

	@Override
	public synchronized  boolean rastrearFuncaoBackground(Usuario u, int acao){
		try {
			String url = SERVER_URL + "log/retornarDoBackground/" + u.getUser() + "/" + u.getPass() + "/" + URLEncoder.encode(version, "UTF-8") + "/" + acao + "/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarPostJson(url, new StringEntity(""), null);
			LogEcops.debug("retornarDoBackground "+resp);
			boolean resposta = Boolean.valueOf(resp);
			return resposta;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public synchronized  boolean inserirStatusViatura(Usuario u , Viatura v , int idStatus){
		try {
				String url = SERVER_URL + "viaturaService/inserirStatusViatura/" + u.getUser() + "/" + u.getPass() + "/"+v.getCdViatura()+"/"+idStatus+"/";
				LogEcops.debug(url);
				String resp = RequestApi.getInstance(context).requisitarApiGET(url);
				LogEcops.debug("inserirStatusViatura "+resp);
				boolean resposta = Boolean.valueOf(resp);
				return resposta;
			} catch (Exception e) {
				e.printStackTrace();
				return false;
			}
	}

	@Override
	public synchronized <T> Resposta<T> consultarAtendimentoDocumentoPdf(Ocorrencia o){
		try {
			String url = Config.SERVER_URL + "relatorio/fichaMovelUnimed" +
						"/"+o.getDespachoAndamentoPK().getNrDdd() +
						"/"+o.getDespachoAndamentoPK().getNrTelefone() +
						"/"+o.getDespachoAndamentoPK().getNrChamado() +
						"/"+o.getDespachoAndamentoPK().getNrDespacho() + "/";

			LogEcops.debug(url);
			byte []  resp = RequestApi.getInstance(context).getArrayByteApiHttpGet(url);
			if ( resp != null) {
				return new  Resposta(resp);
			}
		}catch(EcopsException e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		} catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}
		return null ;
	}

	@Override
	public synchronized <T> Resposta<T> consultarAtendimentoDocumentoPdfCad(Ocorrencia o){
		try {//http://172.26.2.244:7003/cad/boletimservlet?tipo=BAFM&pnr_ddd=27&pnr_telefone=32323232&pnr_chamado=260003&pnr_despacho=159
			String url = Config.SERVER_URL_CAD + "boletimservlet?tipo=BAFM&" +
					"pnr_ddd="+o.getDespachoAndamentoPK().getNrDdd() +
					"&pnr_telefone="+o.getDespachoAndamentoPK().getNrTelefone() +
					"&pnr_chamado="+o.getDespachoAndamentoPK().getNrChamado() +
					"&pnr_despacho="+o.getDespachoAndamentoPK().getNrDespacho();


			LogEcops.debug(url);
			byte []  resp = RequestApi.getInstance(context).getArrayByteApiHttpGet(url);
			if ( resp != null) {
				return new  Resposta(resp);
			}
		}catch(EcopsException e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		} catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}
		return null ;
	}

	@Override
	public synchronized <T> Resposta<T> consultarEnvolvidoTipoTermoFm(Usuario u ){
		try{
			String url = SERVER_URL+ "envolvidoSamu/envolvidoTipoTermoFm/"+ u.getUser() + "/" + u.getPass() + "/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			LogEcops.debug("resposta: "+resp);
			if ( resp != null && !resp.isEmpty()){
				List<EnvolvidoTipoTermoFm> lista = ConvertJsonForObject.getInstance().convertToList(resp, EnvolvidoTipoTermoFm[].class);
				if (lista != null) {
					return new Resposta<T>(lista);
				} else {
					return new Resposta(null,context.getString(R.string.ERRO_SERVIDOR_DESCONECTADO));
				}
			} else {
				return new Resposta(null,context.getString(R.string.SEM_TIPO_RELATORIO));
			}

		} catch(EcopsException e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		} catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}
	}

	@Override
	public synchronized <T> Resposta<T> consultarConfigPrinter(Usuario u ){
		try{
			String url = SERVER_URL+ "configPrinter/listarConfigPrinterWifi/"+ u.getUser() + "/" + u.getPass() + "/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			LogEcops.debug("resposta: "+resp);
			if ( resp != null){
				List<ConfigPrinter> lista = ConvertJsonForObject.getInstance().convertToList(resp, ConfigPrinter[].class);
				if (lista != null) {
					return new Resposta<T>(lista);
				} else {
					return new Resposta(null,context.getString(R.string.ERRO_SERVIDOR_DESCONECTADO));
				}
			} else {
				return new Resposta(null,"OK");
			}

		} catch(EcopsException e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		} catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}
	}

	@Override
	public synchronized  boolean inserirTipoTermoFm(Usuario u ,long idTipoTermoFm ,  EnvolvidoTransferencia es ){
		try {
			String url = SERVER_URL + "envolvidoSamu/inserirTipoTermoFm/" + u.getUser() + "/" + u.getPass() +
					"/"+idTipoTermoFm +
					"/"+es.getIdEnvolvidoDesp() +"/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			LogEcops.debug("resposta: "+resp);
			boolean resposta = Boolean.valueOf(resp);
			return resposta;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public synchronized int verificarAlocacaoViatura(Usuario u, String idViatura, String imei){
		try {
			String url = SERVER_URL + "viaturaService/verificarAlocacaoViatura/" + u.getUser() + "/" + u.getPass() +
					"/"+ idViatura +"/" + imei +"/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			LogEcops.debug("resposta: "+resp);
			if ( resp != null){
				boolean resposta = Boolean.valueOf(resp);
				return resposta ? 1 : 0;
			} else {
				return -1;
			}
		} catch (Exception e) {
			e.printStackTrace();
			return -1;
		}
	}

	@Override
	public synchronized boolean registrarStatusNetworkDb(Usuario u , ConnectivityInfo connectivityInfo) {
		if(connectivityInfo.getId() != null || !Persistencia.getInstance(context).informacoesNaoSincronisadasJaRegistrada(connectivityInfo != null ? connectivityInfo.getStatus() : 0))
			return Persistencia.getInstance(context).registrarStatusConectividade(connectivityInfo);
		return true;
	}

	@Override
	public synchronized boolean registrarAtualizacaoRecusada(UsuarioOcorrenciaWrapper uow) {
		try {
			String url = SERVER_URL + "log/atualizacaoRecusada/" + uow.getUsuario().getUser() + "/" + uow.getUsuario().getPass() + "/"
                    + uow.getOcorrencia().getNrChamadoNovo() + "/" +  URLEncoder.encode(version, "UTF-8") + "/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url, true);
			LogEcops.debug("retornarDoBackground "+resp);
			boolean resposta = Boolean.valueOf(resp.trim());
			return resposta;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public synchronized boolean registrarStatusNetwork(Usuario u , Integer acao, String marcacao) {
		try {
			String url = SERVER_URL + "log/registrarStatusNetwork/" + u.getUser() + "/" + u.getPass() + "/" +
					URLEncoder.encode(version, "UTF-8") + "/" + acao + "/" + marcacao + "/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarPostJson(url, new StringEntity(""), null);
			LogEcops.debug("retornarDoBackground "+resp);
			boolean resposta = Boolean.valueOf(resp.trim());
			return resposta;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public synchronized List<ConnectivityInfo> dadosConectividadeNaoSincronizados() {
		return Persistencia.getInstance(context).pegarInformacoesNaoSincronisadas();
	}

	@Override
	public synchronized boolean inserirDadosObito(Usuario u ,  EnvolvidoSamu es){
		try {
			Date date = es.getDtHoraObito();
			String date2 = new SimpleDateFormat("yyyy-MM-dd HH:mm").format(date);


			String url = SERVER_URL + "envolvidoSamu/inserirInformacoesObito/" + u.getUser() + "/" + u.getPass() + "/"
					+ es.getIdEnvolvido() + "/" + URLEncoder.encode(date2, "UTF8") + "/"
					+ es.getFlObito() + "/" + es.getNrDeclaracaoObito() + "/";

			LogEcops.debug(url);

			Gson gson = new Gson();
			String gsonString = gson.toJson(es);
			LogEcops.debug("gsonString: "+gsonString);
			StringEntity stringEntity = new StringEntity(gsonString, "UTF-8");

			String resp = RequestApi.getInstance(context).requisitarPostJson(url,stringEntity, u.getRegistroFuncional());
			if ( resp != null)
				return true;
			else
				return false ;
		} catch (Exception ex) {
			ex.printStackTrace();
			return false;
		}
	}
	@Override
	public synchronized boolean inserirDtUltimaImpressao(Usuario u, DespachoAndamentoPK dak){
		try {
			String url = SERVER_URL + "despachoAndamento/inserirDtUltimaImpressao/" + u.getUser() + "/" + u.getPass() +
					"/"+ dak.getNrDdd() + "/"+ dak.getNrTelefone() +"/" + dak.getNrChamado() +"/" + dak.getNrDespacho() +"/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			LogEcops.debug("resposta: "+resp);
			boolean resposta = Boolean.valueOf(resp);
			return resposta;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public synchronized int getCountMensagensNaoLidas(Usuario u, long idEnvolvido) {
		int i = 0;
		synchronized (this) {
			try {
				String url = this.SERVER_URL + "observacao/getCountMensagensNaoLidas/" + u.getUser() + "/" + u.getPass() + "/" + idEnvolvido + "/";
				LogEcops.debug(url);
				String resp = RequestApi.getInstance(context).requisitarApiGET(url);
				LogEcops.debug("resposta: " + resp);
				if (resp != null) {
					i = Integer.parseInt(resp);
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return i;
	}

	@Override
	public synchronized boolean updateDtVisualizacaoObservacao(Usuario u, Long idEnvolvido, String tipoObservacao) {
		boolean z = false;
		synchronized (this) {
			try {
				String url = this.SERVER_URL + "observacao/updateDtVisualizacaoObservacao/" + u.getUser() + "/" + u.getPass() + "/" + idEnvolvido + "/" + tipoObservacao + "/";
				LogEcops.debug(url);
				String resp = RequestApi.getInstance(context).requisitarApiGET(url);
				LogEcops.debug("resposta: " + resp);
				if (resp != null && Boolean.valueOf(resp).booleanValue()) {
					z = true;
				}
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		return z;
	}

	@Override
	public <T> Resposta<T> verificaAutenticacaoIMEI() {

		try {
			final String imei = Tools.getIdDevice(getApplicationContext());
			LogEcops.debug(imei);
			LoginRequest lg = new LoginRequest();
			lg.setUserimei(imei);
			String url = SERVER_URL + "token/verificarAuth" + "/";
			LogEcops.debug(url);
			Gson gson = new Gson();
			String gsonString = gson.toJson(lg);
			LogEcops.debug("gsonString: " + gsonString);
			StringEntity stringEntity = new StringEntity(gsonString, "UTF-8");
			String resp = RequestApi.getInstance(context).requisitarPostJson(url, stringEntity, null);
			if (resp != null && !Tools.isNumeroRegexp(resp)) {
				csi.android.ecops.dominio.LoginViatura obj = (csi.android.ecops.dominio.LoginViatura) ConvertJsonForObject.getInstance().convert(resp, csi.android.ecops.dominio.LoginViatura.class);
				if (obj != null) {
					Timestamp dataDeHoje = new Timestamp(System.currentTimeMillis());
					long ts = dataDeHoje.getTime();
					LogEcops.debug("validarUsuarioComViatura: dataDeHoje.getTime() " + dataDeHoje.getTime());
					//obj.usuario.setUser(u.getUser());
					//obj.usuario.setPass(u.getPassDecript());
					obj.usuario.setDtCriacao(ts);
					for (Viatura v : obj.listaViaturas) {
						v.setCdUsuario(obj.usuario.getCdUsuario());
					}
					return new Resposta(obj);
				} else {
					return new Resposta<T>(null, context.getString(R.string.invalid_username_or_password));
				}
			} else {
				if (resp.equals(String.valueOf(HttpStatus.SC_NO_CONTENT))) {
					return new Resposta<T>(null, "Usuário ou senha inválidos.");
				} else if (LoginRequest.isIMEIResponse(resp)) {
					return new Resposta<T>(null, resp);
				}
				return new Resposta<T>(null, "Servidor retornou " + resp);
			}
		} catch (IllegalAccessError e) {
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}
	}

	@Override
	public synchronized String consultarTipoAutenticacao(String imeiDevice) {
		try {
			String url = SERVER_URL + "token/verificarAuth/";
			Gson gson = new Gson();
            LoginRequest loginRequest = new LoginRequest();
            loginRequest.setUserimei(imeiDevice);
			String gsonString = gson.toJson(loginRequest);

			StringEntity stringEntity = new StringEntity(gsonString, "UTF-8");


			String resposta = sendPOST(url, gsonString);

			return resposta != null ? resposta : RequestApi.getInstance(context).requisitarPostJson2(url, stringEntity, true);
		}
		catch (InfoException e) {
			return e.getTipo();
		}
		catch (Exception e) {
			e.printStackTrace();
			return e.getMessage();
		}
	}

	private static final String USER_AGENT = "Mozilla/5.0";
	private static String sendPOST(String url, String json) throws IOException {
		URL obj = new URL(url);
		HttpURLConnection con = (HttpURLConnection) obj.openConnection();
		con.setRequestMethod("POST");
		con.setRequestProperty("User-Agent", USER_AGENT);
		con.setRequestProperty("Content-type", "application/json");

		// For POST only - START
		con.setDoOutput(true);
		OutputStream os = con.getOutputStream();
		os.write(json.getBytes());
		os.flush();
		os.close();
		// For POST only - END

		int responseCode = con.getResponseCode();

		StringBuffer response = null;

		if (responseCode == HttpURLConnection.HTTP_OK) { //success
			BufferedReader in = new BufferedReader(new InputStreamReader(con.getInputStream()));
			String inputLine;
			response = new StringBuffer();

			while ((inputLine = in.readLine()) != null) {
				response.append(inputLine);
			}
			in.close();

		} else {
			System.out.println("POST request did not work.");
		}

		return response != null ? response.toString() : null;
	}

	@Override
	public synchronized String consultarStatusUsuario(String usuario) {
		try {
			String url = SERVER_URL + "usuario/statusUsuario/" + usuario;
			Gson gson = new Gson();
			LoginRequest loginRequest = new LoginRequest();
			String gsonString = gson.toJson(loginRequest);

			StringEntity stringEntity = new StringEntity(gsonString, "UTF-8");
			return RequestApi.getInstance(context).requisitarApiGET(url);
		}
		catch (InfoException e) {
			return e.getTipo();
		}
		catch (Exception e) {
			e.printStackTrace();
			return e.getMessage();
		}
	}

	@Override
	public synchronized <T> Resposta<T> boletim(Ocorrencia o, String tipo){
		try {
			String url = Config.SERVER_URL + "relatorio/boletim/";

			Gson gson = new Gson();

			BoletimRequest boletimRequest = new BoletimRequest();
			boletimRequest.setTp(tipo);
			boletimRequest.setPnr_ddd(o.getDespachoAndamentoPK().getNrDdd());
			boletimRequest.setPnr_telefone(o.getDespachoAndamentoPK().getNrTelefone());
			boletimRequest.setPnr_chamado(o.getDespachoAndamentoPK().getNrChamado());
			boletimRequest.setPnr_despacho(o.getDespachoAndamentoPK().getNrDespacho());
			boletimRequest.setPchamado_novo(o.getNrChamadoNovo());

			String gsonString = gson.toJson(boletimRequest);

			StringEntity stringEntity = new StringEntity(gsonString, "UTF-8");
			LogEcops.debug(url);
			byte []  resp = RequestApi.getFileInstance(context).getArrayByteApiHttpPost(url, stringEntity);
			if ( resp != null) {
				return new  Resposta(resp);
			}
		}catch(EcopsException e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		} catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}
		return null ;
	}

	@Override
	public synchronized Resposta recebeuObservacao(long idObservacao) {

		try {
			String url = Config.SERVER_URL + "observacao/recebeuObservacao/" + idObservacao + "/";

			RequestApi.getInstance(context).requisitarPostJson2(url, new StringEntity(""));

		} catch(Exception e){
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}

    	return new Resposta(true);
	}

	@Override
	public String salvarDescricaoChamado(DespachoAndamentoPK pk, String dsPartChamado) {
		String retorno = null;
		try {
			String url = Config.SERVER_URL + "despachoAndamento/salvarDescricao/";

			JsonObject body = new JsonObject();
			body.addProperty("nrDDD", pk.getNrDdd());
			body.addProperty("nrTelefone", pk.getNrTelefone());
			body.addProperty("nrChamado", pk.getNrChamado());
			body.addProperty("nrDespacho", pk.getNrDespacho());
			body.addProperty("dsDespacho", dsPartChamado);

			Gson gson = new Gson();

			retorno = RequestApi.getInstance(context).requisitarPostJson2(url,
					new StringEntity(gson.toJson(body), "UTF-8"));
		} catch (Exception e) {
			e.printStackTrace();
		}

		return retorno;
	}

	@Override
	public String consultaMonitoramentoEnvolvido(Integer env) {
		try {
			String url = Config.SERVER_URL + "envolvidoSamu/consultaMonitoramento/" + env + "/";

			return RequestApi.getInstance(context).requisitarApiGET(url);

		} catch(Exception e){
			e.printStackTrace();
		}

		return null;
	}

	@Override
	public <T> Resposta<T> paginaDocumentoImagem(String urldisplay) {
		try {
			String url = SERVER_URL + "ocorrencia/paginaDocumentoImagem/?i=" + URLEncoder.encode(urldisplay,"UTF-8");

			LogEcops.debug(url);
			byte []  resp = RequestApi.getInstance(context).getArrayByteApiHttpGet(url);
			if ( resp != null) {
				return new  Resposta(resp);
			}
		}catch(EcopsException e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		} catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}
		return null ;
	}

	@Override
	public synchronized <T> Resposta<T> documentoImagemPdf(Usuario u , EnvolvidoDocumento ed){
		try {
			String url = SERVER_URL + "ocorrencia/documentoImagemPdf/"+ed.getCdDespachoDocumento() + "/" + getTipoDocumento(ed.getNmNomeExtensaoArquivo()) + "/";

			LogEcops.debug(url);
			byte []  resp = RequestApi.getInstance(context).getArrayByteApiHttpGet(url);
			if ( resp != null) {

				ed.setImgDocumento(resp);
				return new  Resposta(ed);
			}
		}catch(EcopsException e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		} catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}
		return null ;
	}

	private String getTipoDocumento(String nmNomeExtensaoArquivo) {
		if(nmNomeExtensaoArquivo.indexOf(".pdf") > -1) {
			return "PDF";
		} else if(nmNomeExtensaoArquivo.indexOf(".doc") > -1) {
			return "DOC";
		} else if(nmNomeExtensaoArquivo.indexOf(".txt") > -1) {
			return "TXT";
		}
		return "IMAGEM";
	}

	@Override
	public String parametro(String idParametro) {
		try {
			String url = SERVER_URL + "parametros/"+idParametro+"/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			return resp;
		} catch(EcopsException e){
			e.printStackTrace();
		} catch(Exception e){
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public String parametro(Usuario u ,String idParametro) {
		try {
			String url = SERVER_URL + "parametros/"+u.getCdAgencia()+"/"+u.getCdUnidPolicial()+"/"+idParametro+"/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			return resp;
		} catch(EcopsException e){
			e.printStackTrace();
		} catch(Exception e){
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public synchronized <T> Resposta<T> consultarViaturasDisponiveis(Usuario u) { // cdUnidPolicial
		try {
			String url = SERVER_URL + "viaturaService/listarTodasViaturasDisponiveis/"
					+ u.getCdAgencia() + "/"
					+ u.getCdUnidPolicial() + "/";

			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url);
			List<Viatura> lista = ConvertJsonForObject.getInstance().convertToList(resp, Viatura[].class);
			return new Resposta<T>(lista);
		} catch(EcopsException e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		} catch(Exception e){
			e.printStackTrace();
			return new Resposta<T>(null, e.getMessage());
		}

	}

	@Override
	public synchronized Resposta<Boolean> alocarEmViatura(String cdViatura , String nrDespacho){
		try {
			String url = SERVER_URL + "viaturaService/alocarEmViatura/" + cdViatura + "/" + nrDespacho + "/";

			LogEcops.debug(url);
			String resp =RequestApi.getInstance(context).requisitarPostJson2(url, new StringEntity(""));
			if ( resp != null) {
				return new  Resposta(resp.equals("true"));
			}
		} catch(Exception e){
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}
		return null ;
	}

	@Override
	public Resposta<ListagemEnvolvidoForm> listagemEnvolvidoForm() {
		String resp = "";
		try {
			String url = SERVER_URL + "envolvido/listagemEnvolvidoForm";

			LogEcops.debug(url);
			resp = RequestApi.getInstance(context).requisitarApiGET(url);
			ListagemEnvolvidoForm lista = ConvertJsonForObject.getInstance().convert(resp, ListagemEnvolvidoForm.class);
			return new Resposta<>(lista);
		} catch(Exception e) {
			if(resp != null && !resp.isEmpty()) {
				return new Resposta(null, resp);
			}
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}
	}

	@Override
	public Resposta<Funcionario> listagemFuncionarios(Usuario u) {
		String resp = "";
		try {
			String url = SERVER_URL + "viaturaService/listagemFuncionarios/"
					+ u.getCdAgencia() + "/"
					+ u.getCdUnidPolicial() + "/";

			LogEcops.debug(url);
			resp = RequestApi.getInstance(context).requisitarApiGET(url);
			List<Funcionario> lista = ConvertJsonForObject.getInstance().convertToList(resp, Funcionario[].class);
			return new Resposta<>(lista);
		} catch(Exception e) {
			if(resp != null && !resp.isEmpty()) {
				return new Resposta(null, resp);
			}
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}
	}

	@Override
	public Resposta<Membro> equipeAlocada(Usuario u, String cdViatura) {
		String resp = "";
		try {
			String url = SERVER_URL + "viaturaService/equipeAlocada/"
					+ u.getCdAgencia() + "/"
					+ u.getCdUnidPolicial() + "/"
					+ cdViatura + "/";

			LogEcops.debug(url);
			resp = RequestApi.getInstance(context).requisitarApiGET(url);
			List<Membro> lista = ConvertJsonForObject.getInstance().convertToList(resp, Membro[].class);
			return new Resposta<>(lista);
		} catch(Exception e) {
			if(resp != null && !resp.isEmpty()) {
				return new Resposta(null, resp);
			}
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}
	}

	@Override
	public Resposta<String> adicionarEquipe(Usuario u, String cdViatura, long idRegistro, boolean forcar) {
		String resp = "";
		try {
			String url = SERVER_URL + "viaturaService/adicionarEquipe/"
					+ u.getCdAgencia() + "/"
					+ u.getCdUnidPolicial() + "/"
					+ cdViatura + "/"
					+ idRegistro + "/"
					+ forcar + "/";

			LogEcops.debug(url);

			resp = RequestApi.getInstance(context).requisitarPostJson2(url,new StringEntity(""));
			return new Resposta(resp);
		} catch(Exception e) {
			if(resp != null && !resp.isEmpty()) {
				return new Resposta(null, resp);
			}
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}
	}

	@Override
	public Resposta<String> movimentarMaterial(Usuario u, DespachoAndamentoPK despacho, Material material) {
		String resp = "";
		try {
			String url = SERVER_URL + "materiais/movimentarMaterial/"
					+ despacho.getNrDdd() + "/"
					+ despacho.getNrTelefone() + "/"
					+ despacho.getNrChamado() + "/"
					+ despacho.getNrDespacho() + "/"
					+ u.getCdAgencia() + "/"
					+ u.getCdUnidPolicial() + "/";

			LogEcops.debug(url);

			Gson gson = new Gson();

			resp = RequestApi.getInstance(context).requisitarPostJson2(url,new StringEntity(gson.toJson(material)));
			return new Resposta(resp);
		} catch(Exception e) {
			if(resp != null && !resp.isEmpty()) {
				return new Resposta(null, resp);
			}
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}
	}

	@Override
	public Resposta<ConsultaDespachoRecurso> tipoRecurosLista(DespachoAndamentoPK despachoPk) {
		String resp = "";
		try {
			String url = SERVER_URL + "viaturaService/tipoRecurosLista/"
					+ despachoPk.getNrDdd() + "/"
					+ despachoPk.getNrTelefone() + "/"
					+ despachoPk.getNrChamado() + "/"
					+ despachoPk.getNrDespacho() + "/";

			LogEcops.debug(url);
			resp = RequestApi.getInstance(context).requisitarApiGET(url);
			List<ConsultaDespachoRecurso> lista = ConvertJsonForObject.getInstance().convertToList(resp, ConsultaDespachoRecurso[].class);
			return new Resposta<>(lista);
		} catch(Exception e) {
			if(resp != null && !resp.isEmpty()) {
				return new Resposta(null, resp);
			}
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}
	}

	@Override
	public Resposta<Boolean> solicitarApoio(Usuario u, ConsultaDespachoRecurso request) {
		try {
			String url = SERVER_URL + "viaturaService/solicitarApoio/"+ u.getCdAgencia() + "/"
					+ u.getCdUnidPolicial() + "/";

			Gson gson = new Gson();
			String gsonString = gson.toJson(request);
			LogEcops.debug("gsonString: "+gsonString);
			StringEntity stringEntity = new StringEntity(gsonString, "UTF-8");
			String resp =RequestApi.getInstance(context).requisitarPostJson2(url, stringEntity);
			if ( resp != null) {
				return new  Resposta(resp.equals("true"));
			}
		} catch(Exception e){
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}
		return null ;
	}


	@Override
	public Resposta<String> removerEquipe(Usuario u, String cdViatura, long idRegistro) {
		String resp = "";
		try {
			String url = SERVER_URL + "viaturaService/removerEquipe/"
					+ u.getCdAgencia() + "/"
					+ u.getCdUnidPolicial() + "/"
					+ cdViatura + "/"
					+ idRegistro + "/";

			LogEcops.debug(url);

			resp = RequestApi.getInstance(context).requisitarPostJson2(url,new StringEntity(""));
			return new Resposta(resp);
		} catch(Exception e) {
			if(resp != null && !resp.isEmpty()) {
				return new Resposta(null, resp);
			}
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}
	}


	@Override
	public Resposta<Estabelecimento> listagemHospitais(String pesquisa) {
		String resp = "";
		try {
			String url = SERVER_URL + "envolvidoSamu/listagemHospitais/?pesquisa=" + URLEncoder.encode(pesquisa, "UTF-8");

			LogEcops.debug(url);
			resp = RequestApi.getInstance(context).requisitarApiGET(url);
			List<Estabelecimento> lista = ConvertJsonForObject.getInstance().convertToList(resp, Estabelecimento[].class);
			return new Resposta<>(lista);
		} catch(Exception e) {
			if(resp != null && !resp.isEmpty()) {
				return new Resposta(null, resp);
			}
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}
	}

	@Override
	public Resposta<TipoDestinoEnvolvido> listagemEncaminhamento(Usuario u, String pesquisa) {
		String resp = "";
		try {
			String url = SERVER_URL + "envolvidoSamu/findEncaminhamentoAutoComplete/?unidade=" + u.getCdUnidPolicial() + "&query=" + URLEncoder.encode(pesquisa, "UTF-8");

			LogEcops.debug(url);
			resp = RequestApi.getInstance(context).requisitarApiGET(url);
			List<TipoDestinoEnvolvido> lista = ConvertJsonForObject.getInstance().convertToList(resp, TipoDestinoEnvolvido[].class);
			return new Resposta<>(lista);
		} catch(Exception e) {
			if(resp != null && !resp.isEmpty()) {
				return new Resposta(null, resp);
			}
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}
	}

	@Override
	public Resposta<Estabelecimento> listagemServicosSaude(Long codigo) {
		String resp = "";
		try {
			String url = SERVER_URL + "envolvidoSamu/findServicoSaudeAutoComplete/?codigo=" + codigo;

			LogEcops.debug(url);
			resp = RequestApi.getInstance(context).requisitarApiGET(url);
			List<Estabelecimento> lista = ConvertJsonForObject.getInstance().convertToList(resp, Estabelecimento[].class);
			return new Resposta<>(lista);
		} catch(Exception e) {
			if(resp != null && !resp.isEmpty()) {
				return new Resposta(null, resp);
			}
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}
	}

	@Override
	public Resposta<String> atualizarEnvolvido(EncaminhamentoRequest request) {
		String resp = "";
		try {
			String url = SERVER_URL + "envolvidoSamu/atualizarEnvolvido/";

			LogEcops.debug(url);

			Gson gson = new Gson();
			String gsonString = gson.toJson(request);
			LogEcops.debug("gsonString: "+gsonString);
			StringEntity stringEntity = new StringEntity(gsonString, "UTF-8");
			resp = RequestApi.getInstance(context).requisitarPostJson2(url, stringEntity);
			return new Resposta(resp);
		} catch(Exception e) {
			if(resp != null && !resp.isEmpty()) {
				return new Resposta(null, resp);
			}
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}
	}

	@Override
	public Resposta<Material> listagemMateriais(Usuario u, Viatura viatura) {
		String resp = "";
		try {
			String url = SERVER_URL + "materiais/listagemMateriais/"
					+ viatura.getCdViatura() + "/";

			LogEcops.debug(url);
			resp = RequestApi.getInstance(context).requisitarApiGET(url);
			List<Material> lista = ConvertJsonForObject.getInstance().convertToList(resp, Material[].class);
			return new Resposta<>(lista);
		} catch(Exception e) {
			if(resp != null && !resp.isEmpty()) {
				return new Resposta(null, resp);
			}
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}
	}


	@Override
	public Resposta<Material> materiaisUsados(Usuario u, DespachoAndamentoPK despachoPk) {
		String resp = "";
		try {
			String url = SERVER_URL + "materiais/materiaisUsados/"
					+ despachoPk.getNrDdd() + "/"
					+ despachoPk.getNrTelefone() + "/"
					+ despachoPk.getNrChamado() + "/"
					+ despachoPk.getNrDespacho() + "/"
					+ u.getCdAgencia() + "/"
					+ u.getCdUnidPolicial() + "/";

			LogEcops.debug(url);
			resp = RequestApi.getInstance(context).requisitarApiGET(url);
			List<Material> lista = ConvertJsonForObject.getInstance().convertToList(resp, Material[].class);
			return new Resposta<>(lista);
		} catch(Exception e) {
			if(resp != null && !resp.isEmpty()) {
				return new Resposta(null, resp);
			}
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}
	}

	@Override
	public Resposta<Boolean> consultarUserLogado(Usuario u) { // cdUnidPolicial
		try {
			String url = SERVER_URL + "token/isUserLoged/"
					+ u.getUser() + "/";
			LogEcops.debug(url);
			Resposta<String> r = RequestApi.getInstance(context).getApiHttpGetWarn(url);
			return r.contemMsgErro() ? new Resposta<Boolean>(null, r.getMsg()) : new Resposta<Boolean>(true);
		} catch(EcopsException e){
			e.printStackTrace();
			return new Resposta<Boolean>(null, e.getMessage());
		} catch(Exception e){
			e.printStackTrace();
			return new Resposta<Boolean>(null, e.getMessage());
		}

	}


	@Override
	public boolean loginEdriver(UsuarioOcorrenciaWrapper uow) {
		try {
			String url = SERVER_URL + "log/loginEdriver/" + uow.getUsuario().getUser() + "/"
					+ uow.getOcorrencia().getNrChamadoNovo() + "/" +  URLEncoder.encode(version, "UTF-8") + "/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url, true);
			LogEcops.debug("retornarDoBackground "+resp);
			boolean resposta = Boolean.valueOf(resp.trim());
			return resposta;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	@Override
	public void onlogon(Usuario u) {

		try {
			String url = SERVER_URL + "usuario/logon/" + u.getUser() + "/"
					+ u.getCdAgencia() + u.getCdUnidPolicial() + "/";
			LogEcops.debug(url);
			String resp = RequestApi.getInstance(context).requisitarApiGET(url, true);
			LogEcops.debug("retornarDoBackground "+resp);
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	@Override
	public Resposta<Parametro> consultarParametros(Usuario u) {
		String resp = "";
		try {
			String url = SERVER_URL + "token/parametros" + "/"
					+ u.getCdAgencia() + "/" + u.getCdUnidPolicial() + "/";

			LogEcops.debug(url);
			resp = RequestApi.getInstance(context).requisitarApiGET(url);
			List<Parametro> lista = ConvertJsonForObject.getInstance().convertToList(resp, Parametro[].class);
			return new Resposta<>(lista);
		} catch(Exception e) {
			if(resp != null && !resp.isEmpty()) {
				return new Resposta(null, resp);
			}
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}
	}

	@Override
	public String getProtocoloIncidente(String tpIncidente) {
		return SERVER_URL + "ocorrencia/incidenteProtocolo/"
				+ tpIncidente + "/" + tpIncidente + ".jpg";
	}

	@Override
	public boolean solicitarAcao(AcaoSolicitadaWrapper acoes) {
		String resp = "";
		try {
			String url = SERVER_URL + "solicitarAcao";

			LogEcops.debug(url);

			Gson gson = new Gson();
			String gsonString = gson.toJson(acoes);
			LogEcops.debug("gsonString: "+gsonString);
			StringEntity stringEntity = new StringEntity(gsonString, "UTF-8");
			resp = RequestApi.getInstance(context).requisitarPostJson2(url, stringEntity);
			return "true".equals(resp);
		} catch(Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	@Override
	public Resposta<Acao> getAcoes(ChamadoViaturaPk pk) {
		String resp = "";
		try {
			String url = SERVER_URL + "solicitarAcao/acoes/"
					+ pk.getDespachoAndamentoPK().getNrDdd() + "/"
					+ pk.getDespachoAndamentoPK().getNrTelefone() + "/"
					+ pk.getDespachoAndamentoPK().getNrChamado() + "/"
					+ pk.getDespachoAndamentoPK().getNrDespacho() + "/"
					+ pk.getCdViatura() + "/";

			LogEcops.debug(url);
			resp = RequestApi.getInstance(context).requisitarApiGET(url);
			List<Acao> lista = ConvertJsonForObject.getInstance().convertToList(resp, Acao[].class);
			return new Resposta<>(lista);
		} catch(Exception e) {
			if(resp != null && !resp.isEmpty()) {
				return new Resposta(null, resp);
			}
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}
	}


	@Override
	public Resposta<Mensagem> consultaMensagens(Usuario usuario) {
		String resp = "";
		try {
			String url = SERVER_URL + "mensagens/listaMensagens/"
					+ usuario.getNmAbrevUsuario() + "/";

			LogEcops.debug(url);
			resp = RequestApi.getInstance(context).requisitarApiGET(url);
			List<Mensagem> lista = ConvertJsonForObject.getInstance().convertToList(resp, Mensagem[].class);
			return new Resposta<>(lista);
		} catch(Exception e) {
			if(resp != null && !resp.isEmpty()) {
				return new Resposta(null, resp);
			}
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}
	}


	@Override
	public Resposta<Mensagem> consultaAvisos(Usuario usuario) {
		String resp = "";
		try {
			String url = SERVER_URL + "mensagens/listaAvisos/"
					+ usuario.getNmAbrevUsuario() + "/";

			LogEcops.debug(url);
			resp = RequestApi.getInstance(context).requisitarApiGET(url);
			List<Mensagem> lista = ConvertJsonForObject.getInstance().convertToList(resp, Mensagem[].class);
			return new Resposta<>(lista);
		} catch(Exception e) {
			if(resp != null && !resp.isEmpty()) {
				return new Resposta(null, resp);
			}
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}
	}

	@Override
	public Resposta<Boolean> marcarComoLido(Mensagem mensagen) {
		String resp = "";
		try {
			String url = SERVER_URL + "mensagens/marcarComoLido";

			LogEcops.debug(url);

			Gson gson = new Gson();
			String gsonString = gson.toJson(mensagen);
			LogEcops.debug("gsonString: "+gsonString);
			StringEntity stringEntity = new StringEntity(gsonString, "UTF-8");
			resp = RequestApi.getInstance(context).requisitarPostJson2(url, stringEntity);
			return new Resposta<Boolean>("true".equals(resp));
		} catch(Exception e) {
			e.printStackTrace();
		}
		return new Resposta<Boolean>(false);
	}

	@Override
	public Resposta<Boolean> enviarMensagem(Mensagem mensagen) {
		String resp = "";
		try {
			String url = SERVER_URL + "mensagens/enviarMensagem";

			LogEcops.debug(url);

			Gson gson = new Gson();
			String gsonString = gson.toJson(mensagen);
			LogEcops.debug("gsonString: "+gsonString);
			StringEntity stringEntity = new StringEntity(gsonString, "UTF-8");
			resp = RequestApi.getInstance(context).requisitarPostJson2(url, stringEntity);
			return new Resposta<Boolean>("true".equals(resp));
		} catch(Exception e) {
			e.printStackTrace();
		}
		return new Resposta<Boolean>(false);
	}


	@Override
	public Resposta<Cid> listagemCids() {
		String resp = "";
		try {
			String url = SERVER_URL + "hipoteseDiagnostica/consultaCidAutoComplete/";

			LogEcops.debug(url);
			resp = RequestApi.getInstance(context).requisitarApiGET(url);
			List<Cid> lista = ConvertJsonForObject.getInstance().convertToList(resp, Cid[].class);
			return new Resposta<>(lista);
		} catch(Exception e) {
			if(resp != null && !resp.isEmpty()) {
				return new Resposta(null, resp);
			}
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}
	}

	@Override
	public Resposta<HipoteseDiagnostica> listagemHipoteses(Integer idEnvolSamu) {
		String resp = "";
		try {
			String url = SERVER_URL + "hipoteseDiagnostica/consultaHipotese?id=" + idEnvolSamu;

			LogEcops.debug(url);
			resp = RequestApi.getInstance(context).requisitarApiGET(url);
			List<HipoteseDiagnostica> lista = ConvertJsonForObject.getInstance().convertToList(resp, HipoteseDiagnostica[].class);
			return new Resposta<>(lista);
		} catch(Exception e) {
			if(resp != null && !resp.isEmpty()) {
				return new Resposta(null, resp);
			}
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}
	}

	@Override
	public Resposta<Boolean> removerHipoteseDiagnostica(HipoteseDiagnostica hipotese) {
		String resp = "";
		try {
			String url = SERVER_URL + "hipoteseDiagnostica/excluirHipoteseDiagnostica/";

			LogEcops.debug(url);

			Gson gson = new Gson();

			resp = RequestApi.getInstance(context).requisitarPostJson2(url,new StringEntity(gson.toJson(hipotese)));
			return new Resposta(resp);
		} catch(Exception e) {
			if(resp != null && !resp.isEmpty()) {
				return new Resposta(null, resp);
			}
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}
	}


	@Override
	public Resposta<Boolean> salvarHipoteseDiagnostica(HipoteseDiagnostica hipotese) {
		String resp = "";
		try {
			String url = SERVER_URL + "hipoteseDiagnostica/inserirHipoteseDiagnostica/";

			LogEcops.debug(url);

			Gson gson = new Gson();

			resp = RequestApi.getInstance(context).requisitarPostJson2(url,new StringEntity(gson.toJson(hipotese)));
			return new Resposta(resp);
		} catch(Exception e) {
			if(resp != null && !resp.isEmpty()) {
				return new Resposta(null, resp);
			}
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}
	}


	@Override
	public Resposta<Boolean> vincularViatura(AtendimentoDados.EnvolvidoViatura envolvido) {
		String resp = "";
		try {
			String url = SERVER_URL + "envolvido/vincularViatura/";

			LogEcops.debug(url);

			Gson gson = new Gson();

			resp = RequestApi.getInstance(context).requisitarPostJson2(url,new StringEntity(gson.toJson(envolvido)));
			return new Resposta(resp);
		} catch(Exception e) {
			if(resp != null && !resp.isEmpty()) {
				return new Resposta(null, resp);
			}
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}
	}


	@Override
	public Resposta<SituacaoAtencao> listarSituacaoAtencao() {
		String resp = "";
		try {
			String url = SERVER_URL + "situacaoAtendimento/listagem";

			LogEcops.debug(url);
			resp = RequestApi.getInstance(context).requisitarApiGET(url);
			List<SituacaoAtencao> lista = ConvertJsonForObject.getInstance().convertToList(resp, SituacaoAtencao[].class);
			return new Resposta<>(lista);
		} catch(Exception e) {
			if(resp != null && !resp.isEmpty()) {
				return new Resposta(null, resp);
			}
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}
	}

	@Override
	public Resposta<SituacaoAtendimento> listagemSituacaoAtendimento(SituacaoAtendimento situacaoAtendimentos) {
		String resp = "";
		try {
			String url = SERVER_URL + "situacaoAtendimento?nrDespacho="+
					situacaoAtendimentos.getDespacho()+
					"&nrChamado="+situacaoAtendimentos.getChamado()+
					"&nrTelefone="+situacaoAtendimentos.getTelefone()+
					"&nrDdd=" + situacaoAtendimentos.getDdd();

			LogEcops.debug(url);
			resp = RequestApi.getInstance(context).requisitarApiGET(url);
			List<SituacaoAtendimento> lista = ConvertJsonForObject.getInstance().convertToList(resp, SituacaoAtendimento[].class);
			return new Resposta<>(lista);
		} catch(Exception e) {
			if(resp != null && !resp.isEmpty()) {
				return new Resposta(null, resp);
			}
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}
	}

	@Override
	public Resposta<Boolean> terminarSituacaoAtendimento(SituacaoAtendimento situacaoAtendimento) {
		String resp = "";
		try {
			String url = SERVER_URL + "situacaoAtendimento/terminar/";

			LogEcops.debug(url);

			Gson gson = new Gson();

			resp = RequestApi.getInstance(context).requisitarPostJson2(url,new StringEntity(gson.toJson(situacaoAtendimento)));
			return new Resposta(resp);
		} catch(Exception e) {
			if(resp != null && !resp.isEmpty()) {
				return new Resposta(null, resp);
			}
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}
	}

	@Override
	public Resposta<Boolean> iniciarSituacaoAtendimento(SituacaoAtendimento situacaoAtendimento) {
		String resp = "";
		try {
			String url = SERVER_URL + "situacaoAtendimento/iniciar/";

			LogEcops.debug(url);

			Gson gson = new Gson();

			resp = RequestApi.getInstance(context).requisitarPostJson2(url,new StringEntity(gson.toJson(situacaoAtendimento)));
			return new Resposta(resp);
		} catch(Exception e) {
			if(resp != null && !resp.isEmpty()) {
				return new Resposta(null, resp);
			}
			e.printStackTrace();
			return new Resposta(null, e.getMessage());
		}
	}
}

package csi.android.ecops.service;

import android.content.Context;

import java.util.List;

import csi.android.ecops.dominio.Acao;
import csi.android.ecops.dominio.AcaoSolicitadaWrapper;
import csi.android.ecops.dominio.AtendimentoFaseEmpenho;
import csi.android.ecops.dominio.AtendimentoLog;
import csi.android.ecops.dominio.ChamadoViaturaPk;
import csi.android.ecops.dominio.Cid;
import csi.android.ecops.dominio.ConnectivityInfo;
import csi.android.ecops.dominio.ConsultaDespachoRecurso;
import csi.android.ecops.dominio.DespachoAndamentoPK;
import csi.android.ecops.dominio.EncaminhamentoRequest;
import csi.android.ecops.dominio.EnvolvidoDocumento;
import csi.android.ecops.dominio.EnvolvidoSamu;
import csi.android.ecops.dominio.EnvolvidoTransferencia;
import csi.android.ecops.dominio.Estabelecimento;
import csi.android.ecops.dominio.Funcionario;
import csi.android.ecops.dominio.HipoteseDiagnostica;
import csi.android.ecops.dominio.ListagemEnvolvidoForm;
import csi.android.ecops.dominio.LoginViatura;
import csi.android.ecops.dominio.Material;
import csi.android.ecops.dominio.Membro;
import csi.android.ecops.dominio.Mensagem;
import csi.android.ecops.dominio.Ocorrencia;
import csi.android.ecops.dominio.OcorrenciaAtendimento;
import csi.android.ecops.dominio.OcorrenciaObservacao;
import csi.android.ecops.dominio.Parametro;
import csi.android.ecops.dominio.RespostaEscalaCincinnati;
import csi.android.ecops.dominio.SinaisVitais;
import csi.android.ecops.dominio.SituacaoAtencao;
import csi.android.ecops.dominio.SituacaoAtendimento;
import csi.android.ecops.dominio.TipoDestinoEnvolvido;
import csi.android.ecops.dominio.Usuario;
import csi.android.ecops.dominio.UsuarioOcorrenciaWrapper;
import csi.android.ecops.dominio.Viatura;
import csi.android.ecops.tools.Resposta;
import csi.android.ecops.view.AtendimentoDados;

/**
 * Created by diogo.coelho on 05/05/2017.
 */

public interface IEcopsService {

    boolean hasContext();
    <T> Resposta<T> validarUsuarioComViatura(Usuario u);
    <T> Resposta<T> consultarViaturas(Usuario u);
    <T> Resposta<T> consultarTodasViaturas(Usuario u);
    <T> Resposta<T> gerarOcorrenciaAtendimento(Ocorrencia o);
    <T> Resposta<T> consultarOcorrencias(Usuario u, Viatura r);
    <T> Resposta<T> consultarOcorrenciasComStatus(Usuario u, Viatura r);
    <T> Resposta<T> consultarOcorrenciaSimplificado(Usuario u, Viatura r);
    <T> Resposta<T> consultarObservacaoNrNovoChamadoComPeriodo(Usuario u, List<Ocorrencia> list);
    <T> Resposta<T> consultarObservacaoNrNovoChamado(Usuario u, String indice);
    <T> Resposta<T> consultarProximasObservacaoApartirIdObservacao(Usuario u, Ocorrencia o , String idObservacao);
    <T> Resposta<T> consultarAtendimentoEnvolvido(Usuario u , Ocorrencia o);
    <T> Resposta<T> consultarEnvolvidoSamu(Usuario u , EnvolvidoTransferencia env);
    <T> Resposta<T> novoEnvolvido(Usuario u ,  EnvolvidoTransferencia es, Ocorrencia o);
    <T> Resposta<T> consultarEnvolvidoSamuHospitalDestino(Usuario u , EnvolvidoSamu es);
    boolean gravarOcorrenciaDadosGerais(Usuario u ,EnvolvidoTransferencia e);
    Integer gravarOcorrenciaObservacao(Usuario u ,OcorrenciaObservacao oo);
    boolean gravarOcorrenciaSinaisVitais(Usuario u ,SinaisVitais es);
    boolean gravarOcorrenciaSinaisSintomasLessoes(Usuario u ,OcorrenciaObservacao oo);
    <T> Resposta<T> consultarHistoricoObservacao(Usuario u , EnvolvidoSamu es);
    <T> Resposta<T> consultarHistoricoSinaisVitais(Usuario u , EnvolvidoSamu es, boolean isNotification);
    <T> Resposta<T> consultarPerguntasEscalaCincinnati(Usuario u);
    boolean gravarRespostasEscalaCincinnati(Usuario u,List<RespostaEscalaCincinnati> lista);
    boolean insertEventoAtendimeto(OcorrenciaAtendimento oa , EcopsService.EVENTO_OCORRENCIA evt , long kmViatura);
    <T> Resposta<T> consultarRastreadorVeiculo(LoginViatura loginViatura );
    <T> Resposta<T>  sincronizarAtendimentoDocumentos(Usuario u , EnvolvidoDocumento documento);
    <T> Resposta<T> consultarAtendimentoListaDocumentos(Usuario u , String id_envolvido);
    <T> Resposta<T> consultarDocumentosApartirDoUltimoId(Usuario u , String idEnvolvido , long  idDespachoDocumento);
    boolean logOff(Usuario u);
    boolean logOn(String u);
    boolean chegadaAoDispositivo(UsuarioOcorrenciaWrapper uow);
    <T> Resposta<T> consultarAtendimentoDocumento(Usuario u , EnvolvidoDocumento ed);
    <T> Resposta<T> consultarAtendimentoTipoDocumento(Usuario u );
    String sincronizarFaseAtendimento(Usuario u , AtendimentoFaseEmpenho afe);
    boolean sincronizarAtendimentoFaseEmpenhoLog(Usuario u , AtendimentoLog al );
    <T> Resposta <T> consultarAtendimentoFaseAtual(Usuario u , AtendimentoFaseEmpenho afe);
    boolean inserirStatusTablet(Usuario u , Viatura v , int idStatus);
    boolean rastrearFuncaoBackground(Usuario u, int acao);
    boolean inserirStatusViatura(Usuario u , Viatura v , int idStatus);
    <T> Resposta<T> consultarAtendimentoDocumentoPdf(Ocorrencia o);
    <T> Resposta<T> consultarAtendimentoDocumentoPdfCad(Ocorrencia o);
    <T> Resposta<T> consultarEnvolvidoTipoTermoFm(Usuario u );
    <T> Resposta<T> consultarConfigPrinter(Usuario u );
    boolean inserirTipoTermoFm(Usuario u ,long idTipoTermoFm ,  EnvolvidoTransferencia es );
    int verificarAlocacaoViatura(Usuario u, String idViatura, String imei);
    boolean registrarStatusNetworkDb(Usuario u , ConnectivityInfo connectivityInfo);
    boolean registrarStatusNetwork(Usuario u , Integer acao, String marcacao);
    List<ConnectivityInfo> dadosConectividadeNaoSincronizados();
    boolean inserirDadosObito(Usuario u ,  EnvolvidoSamu es);
    <T> Resposta<T> retornaEnvolvidoSamuIdEnvolvidoSamu(Usuario u, long idEnvolvido);
    <T> Resposta<T> consultarPerguntasEscalaGlasgow(Usuario u);
    boolean inserirDtUltimaImpressao(Usuario u ,DespachoAndamentoPK dak);
    boolean updateDtVisualizacaoObservacao(Usuario usuario, Long l, String str);
    int getCountMensagensNaoLidas(Usuario usuario, long j);
    boolean registrarAtualizacaoRecusada(UsuarioOcorrenciaWrapper uow);
    <T> Resposta<T> verificaAutenticacaoIMEI();
    String consultarTipoAutenticacao(String imeiDevice);
    String consultarStatusUsuario(String usuario);
    Context getApplicationContext();
    boolean parametroBA();
    boolean parametroBC();
    <T> Resposta<T> boletim(Ocorrencia o, String tipo);
    Resposta recebeuObservacao(long idObservacao);
    String salvarDescricaoChamado(DespachoAndamentoPK pk, String dsPartChamado);
    String consultaMonitoramentoEnvolvido(Integer env);

    <T> Resposta<T> paginaDocumentoImagem(String urldisplay);
    <T> Resposta<T> documentoImagemPdf(Usuario u , EnvolvidoDocumento ed);
    String parametro(String idParametro);
    String parametro(Usuario u ,String idParametro);

    boolean parametroExibeBotaoLiberar();
    String parametroCargoMedico();
    String parametroCargoTecEnfe();
    String parametroCargoEnfermeiro();

    Resposta<LoginViatura> validarUsuarioAzure(String token);
//    parametroCargoEnfermeiro
//    parametroCargoMedico  parametroCargoTecEnfe
    <T> Resposta<T> consultarViaturasDisponiveis(Usuario u);

    Resposta<Boolean> alocarEmViatura(String cdViatura, String nrDespacho);

    Resposta<ListagemEnvolvidoForm> listagemEnvolvidoForm();

    Resposta<Funcionario> listagemFuncionarios(Usuario u);

    Resposta<Membro> equipeAlocada(Usuario u, String cdViatura);

    Resposta<String> adicionarEquipe(Usuario u, String cdViatura, long idRegistro, boolean forcar);

    Resposta<Estabelecimento> listagemHospitais(String pesquisa);

    Resposta<TipoDestinoEnvolvido> listagemEncaminhamento(Usuario u, String pesquisa);

    Resposta<Estabelecimento> listagemServicosSaude(Long codigo);

    Resposta<String> atualizarEnvolvido(EncaminhamentoRequest request);

    Resposta<String> removerEquipe(Usuario u, String cdViatura, long idRegistro);

    Resposta<Material> listagemMateriais(Usuario u, Viatura viatura);

    Resposta<Material> materiaisUsados(Usuario usuario, DespachoAndamentoPK despachoPk);

    Resposta<String> movimentarMaterial(Usuario usuario, DespachoAndamentoPK despacho, Material material);

    Resposta<ConsultaDespachoRecurso> tipoRecurosLista(DespachoAndamentoPK pk);

    Resposta<Boolean> solicitarApoio(Usuario usuario, ConsultaDespachoRecurso v);

    <T> Resposta<T> consultarUserLogado(Usuario u);

    boolean loginEdriver(UsuarioOcorrenciaWrapper uow);

    void onlogon(Usuario u);

    Resposta<Parametro> consultarParametros(Usuario u);

    String getProtocoloIncidente(String tpIncidente);

    boolean solicitarAcao(AcaoSolicitadaWrapper acoes);

    Resposta<Acao> getAcoes(ChamadoViaturaPk pk);

    Resposta<Mensagem> consultaMensagens(Usuario usuario);
    Resposta<Mensagem> consultaAvisos(Usuario usuario);

    Resposta<Boolean> marcarComoLido(Mensagem mensagen);

    Resposta<Boolean> enviarMensagem(Mensagem mensagen);

    Resposta<Cid> listagemCids();

    Resposta<HipoteseDiagnostica> listagemHipoteses(Integer idEnvolSamu);

    Resposta<Boolean> salvarHipoteseDiagnostica(HipoteseDiagnostica hipotese);

    Resposta<Boolean> removerHipoteseDiagnostica(HipoteseDiagnostica hipotese);

    Resposta<Boolean> vincularViatura(AtendimentoDados.EnvolvidoViatura envolvido);

    Resposta<SituacaoAtendimento> listagemSituacaoAtendimento(SituacaoAtendimento situacaoAtendimentos);

    Resposta<Boolean> terminarSituacaoAtendimento(SituacaoAtendimento situacaoAtendimento);

    Resposta<SituacaoAtencao> listarSituacaoAtencao();

    Resposta<Boolean> iniciarSituacaoAtendimento(SituacaoAtendimento situacaoAtendimento);
}
